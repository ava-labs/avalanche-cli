name: Lint + Unit Tests

on:
  push:
    branches:
      - main
  pull_request:

env:
  GO_VERSION: "1.20"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.52
          working-directory: .
          args: --timeout 5m
      - name: Install license check
        run: go install github.com/google/addlicense@v1.0.0
      - name: Check license
        run: addlicense -f ./LICENSE.header -check -v ./**/*.go ./**/**/*.go ./**/**/**/*.go ./**/**/**/**/*.go
  test:
    name: Golang Unit Tests v${{ matrix.go }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go: ["1.20"]
        os: [ubuntu-20.04, macos-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}
      - run: go mod download
      - run: scripts/build.sh
      - run: go test -v -coverprofile=coverage.out $(go list ./... | grep -v /tests/)
        env:
          CGO_CFLAGS: "-O -D__BLST_PORTABLE__" # Set the CGO flags to use the portable version of BLST
      - run: go tool cover -func=coverage.out
  e2e_test:
    name: e2e tests
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      matrix:
        suite:
          [
            "\\[APM\\]",
            "\\[Error handling\\]",
            "\\[Key\\]",
            "\\[Network\\]",
            "\\[Package Management\\]",
            "\\[Root\\]",
            "\\[Local Subnet\\]",
            "\\[Subnet Compatibility\\]",
            "\\[Public Subnet\\]",
            "\\[Subnet\\]",
            "\\[Upgrade expect network failure\\]",
            "\\[Upgrade public network\\]",
            "\\[Upgrade local network\\]",
            "\\[Node create\\]",
            "\\[Node devnet\\]",
            "\\[Docker\\]",
          ]
        os: [ubuntu-latest, macos-latest]
        exclude:
          - os: macos-latest
            suite: "\\[Node create\\]"
          - os: macos-latest
            suite: "\\[Node devnet\\]"
          - os: macos-latest
            suite: "\\[Docker\\]"
          - os: macos-latest
            suite: "\\[Public Subnet\\]"
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "14.x"
      - name: Yarn install
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_on: error
          command: yarn --cwd ./tests/e2e/hardhat
      - name: ts-node install
        shell: bash
        run: |
          npm install -g typescript
          npm install -g ts-node
      - name: Install docker on macos
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew install docker
          colima start
          sudo ln -s ~/.colima/default/docker.sock /var/run/docker.sock
      - name: generate ssh token for e2e tests
        run: |
          mkdir -p ~/.ssh && ssh-keygen -b 2048 -t rsa -f ~/.ssh/runner-avalanche-cli-keypair -q -N ""
          echo "E2E_SSH_PUB_KEY<<EOF" >> $GITHUB_ENV
          cat ~/.ssh/runner-avalanche-cli-keypair >> $GITHUB_ENV 
          echo "EOF" >> $GITHUB_ENV
      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ env.E2E_SSH_PUB_KEY }}   
      - name: Run e2e tests
        shell: bash
        run: AVALANCHE_CLI_GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} LEDGER_SIM=true scripts/run.e2e.sh --filter "${{ matrix.suite }}"
      - name: "Upload Artifact"
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cli-logs-${{ matrix.os }}
          path: |
            ~/.avalanche-cli/
            !~/.avalanche-cli/bin/
            !~/.avalanche-cli/snapshots
          retention-days: 5
