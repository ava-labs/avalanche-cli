// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	ids "github.com/ava-labs/avalanchego/ids"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PublicDeployer is an autogenerated mock type for the PublicDeployer type
type PublicDeployer struct {
	mock.Mock
}

// AddValidator provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *PublicDeployer) AddValidator(_a0 ids.ID, _a1 ids.NodeID, _a2 uint64, _a3 time.Time, _a4 time.Duration) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 error
	if rf, ok := ret.Get(0).(func(ids.ID, ids.NodeID, uint64, time.Time, time.Duration) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Deploy provides a mock function with given fields: controlKeys, threshold, chain, genesis
func (_m *PublicDeployer) Deploy(controlKeys []string, threshold uint32, chain string, genesis string) (ids.ID, ids.ID, error) {
	ret := _m.Called(controlKeys, threshold, chain, genesis)

	var r0 ids.ID
	if rf, ok := ret.Get(0).(func([]string, uint32, string, string) ids.ID); ok {
		r0 = rf(controlKeys, threshold, chain, genesis)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ids.ID)
		}
	}

	var r1 ids.ID
	if rf, ok := ret.Get(1).(func([]string, uint32, string, string) ids.ID); ok {
		r1 = rf(controlKeys, threshold, chain, genesis)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(ids.ID)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func([]string, uint32, string, string) error); ok {
		r2 = rf(controlKeys, threshold, chain, genesis)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
