{
    "description": "Avalanche-CLI is a command-line tool that gives developers access to\neverything Avalanche. This release specializes in helping developers\nbuild and test Blockchain networks.\n\nTo get started, look at the documentation for the subcommands or jump right\nin with avalanche blockchain create myNewBlockchain.",
    "flags": [
        {
            "flag": "--config",
            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
        },
        {
            "flag": "-h, --help",
            "description": "help for avalanche"
        },
        {
            "flag": "--log-level",
            "description": "string    log level for the application (default \"ERROR\")"
        },
        {
            "flag": "--skip-update-check",
            "description": "skip check for new versions"
        },
        {
            "flag": "-v, --version",
            "description": "version for avalanche"
        }
    ],
    "subcommands": {
        "blockchain": {
            "description": "The blockchain command suite provides a collection of tools for developing\nand deploying Blockchains.\n\nTo get started, use the blockchain create command wizard to walk through the\nconfiguration of your very first Blockchain. Then, go ahead and deploy it\nwith the blockchain deploy command. You can use the rest of the commands to\nmanage your Blockchain configurations and live deployments.",
            "flags": [
                {
                    "flag": "-h, --help",
                    "description": "help for blockchain"
                },
                {
                    "flag": "--config",
                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                },
                {
                    "flag": "--log-level",
                    "description": "string    log level for the application (default \"ERROR\")"
                },
                {
                    "flag": "--skip-update-check",
                    "description": "skip check for new versions"
                }
            ],
            "subcommands": {
                "addValidator": {
                    "description": "The blockchain addValidator command adds a node as a validator to\nan L1 of the user provided deployed network. If the network is proof of \nauthority, the owner of the validator manager contract must sign the \ntransaction. If the network is proof of stake, the node must stake the L1's\nstaking token. Both processes will issue a RegisterL1ValidatorTx on the P-Chain.\n\nThis command currently only works on Blockchains deployed to either the Fuji\nTestnet or Mainnet.",
                    "flags": [
                        {
                            "flag": "--aggregator-allow-private-peers",
                            "description": "allow the signature aggregator to connect to peers with private IP (default true)"
                        },
                        {
                            "flag": "--aggregator-extra-endpoints",
                            "description": "strings   endpoints for extra nodes that are needed in signature aggregation"
                        },
                        {
                            "flag": "--aggregator-log-level",
                            "description": "string          log level to use with signature aggregator (default \"Debug\")"
                        },
                        {
                            "flag": "--aggregator-log-to-stdout",
                            "description": "use stdout for signature aggregator logs"
                        },
                        {
                            "flag": "--balance",
                            "description": "uint                         set the AVAX balance of the validator that will be used for continuous fee on P-Chain"
                        },
                        {
                            "flag": "--blockchain-genesis-key",
                            "description": "use genesis allocated key to pay fees for completing the validator's registration (blockchain gas token)"
                        },
                        {
                            "flag": "--blockchain-key",
                            "description": "string                CLI stored key to use to pay fees for completing the validator's registration (blockchain gas token)"
                        },
                        {
                            "flag": "--blockchain-private-key",
                            "description": "string        private key to use to pay fees for completing the validator's registration (blockchain gas token)"
                        },
                        {
                            "flag": "--bls-proof-of-possession",
                            "description": "string       set the BLS proof of possession of the validator to add"
                        },
                        {
                            "flag": "--bls-public-key",
                            "description": "string                set the BLS public key of the validator to add"
                        },
                        {
                            "flag": "--cluster",
                            "description": "string                       operate on the given cluster"
                        },
                        {
                            "flag": "--create-local-validator",
                            "description": "create additional local validator and add it to existing running local node"
                        },
                        {
                            "flag": "--default-duration",
                            "description": "(for Subnets, not L1s) set duration so as to validate until primary validator ends its period"
                        },
                        {
                            "flag": "--default-start-time",
                            "description": "(for Subnets, not L1s) use default start time for subnet validator (5 minutes later for fuji & mainnet, 30 seconds later for devnet)"
                        },
                        {
                            "flag": "--default-validator-params",
                            "description": "(for Subnets, not L1s) use default weight/start/duration params for subnet validator"
                        },
                        {
                            "flag": "--delegation-fee",
                            "description": "uint16                (PoS only) delegation fee (in bips) (default 100)"
                        },
                        {
                            "flag": "--devnet",
                            "description": "operate on a devnet network"
                        },
                        {
                            "flag": "--disable-owner",
                            "description": "string                 P-Chain address that will able to disable the validator with a P-Chain transaction"
                        },
                        {
                            "flag": "--endpoint",
                            "description": "string                      use the given endpoint for network operations"
                        },
                        {
                            "flag": "-e, --ewoq",
                            "description": "use ewoq key [fuji/devnet only]"
                        },
                        {
                            "flag": "-f, --fuji",
                            "description": "testnet                         operate on fuji (alias to testnet"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for addValidator"
                        },
                        {
                            "flag": "-k, --key",
                            "description": "string                           select the key to use [fuji/devnet only]"
                        },
                        {
                            "flag": "-g, --ledger",
                            "description": "use ledger instead of key (always true on mainnet, defaults to false on fuji/devnet)"
                        },
                        {
                            "flag": "--ledger-addrs",
                            "description": "strings                 use the given ledger addresses"
                        },
                        {
                            "flag": "-l, --local",
                            "description": "operate on a local network"
                        },
                        {
                            "flag": "-m, --mainnet",
                            "description": "operate on mainnet"
                        },
                        {
                            "flag": "--node-endpoint",
                            "description": "string                 gather node id/bls from publicly available avalanchego apis on the given endpoint"
                        },
                        {
                            "flag": "--node-id",
                            "description": "string                       node-id of the validator to add"
                        },
                        {
                            "flag": "--output-tx-path",
                            "description": "string                (for Subnets, not L1s) file path of the add validator tx"
                        },
                        {
                            "flag": "--partial-sync",
                            "description": "set primary network partial sync for new validators (default true)"
                        },
                        {
                            "flag": "--remaining-balance-owner",
                            "description": "string       P-Chain address that will receive any leftover AVAX from the validator when it is removed from Subnet"
                        },
                        {
                            "flag": "--rpc",
                            "description": "string                           connect to validator manager at the given rpc endpoint"
                        },
                        {
                            "flag": "--stake-amount",
                            "description": "uint                    (PoS only) amount of tokens to stake"
                        },
                        {
                            "flag": "--staking-period",
                            "description": "duration              how long this validator will be staking"
                        },
                        {
                            "flag": "--start-time",
                            "description": "string                    (for Subnets, not L1s) UTC start time when this validator starts validating, in 'YYYY-MM-DD HH:MM:SS' format"
                        },
                        {
                            "flag": "--subnet-auth-keys",
                            "description": "strings             (for Subnets, not L1s) control keys that will be used to authenticate add validator tx"
                        },
                        {
                            "flag": "-t, --testnet",
                            "description": "fuji                         operate on testnet (alias to fuji)"
                        },
                        {
                            "flag": "--wait-for-tx-acceptance",
                            "description": "(for Subnets, not L1s) just issue the add validator tx, without waiting for its acceptance (default true)"
                        },
                        {
                            "flag": "--weight",
                            "description": "uint                          set the staking weight of the validator to add (default 20)"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "changeOwner": {
                    "description": "The blockchain changeOwner changes the owner of the deployed Blockchain.",
                    "flags": [
                        {
                            "flag": "--auth-keys",
                            "description": "strings       control keys that will be used to authenticate transfer blockchain ownership tx"
                        },
                        {
                            "flag": "--cluster",
                            "description": "string          operate on the given cluster"
                        },
                        {
                            "flag": "--control-keys",
                            "description": "strings    addresses that may make blockchain changes"
                        },
                        {
                            "flag": "--devnet",
                            "description": "operate on a devnet network"
                        },
                        {
                            "flag": "--endpoint",
                            "description": "string         use the given endpoint for network operations"
                        },
                        {
                            "flag": "-e, --ewoq",
                            "description": "use ewoq key [fuji/devnet]"
                        },
                        {
                            "flag": "-f, --fuji",
                            "description": "testnet            operate on fuji (alias to testnet"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for changeOwner"
                        },
                        {
                            "flag": "-k, --key",
                            "description": "string              select the key to use [fuji/devnet]"
                        },
                        {
                            "flag": "-g, --ledger",
                            "description": "use ledger instead of key (always true on mainnet, defaults to false on fuji/devnet)"
                        },
                        {
                            "flag": "--ledger-addrs",
                            "description": "strings    use the given ledger addresses"
                        },
                        {
                            "flag": "-l, --local",
                            "description": "operate on a local network"
                        },
                        {
                            "flag": "-m, --mainnet",
                            "description": "operate on mainnet"
                        },
                        {
                            "flag": "--output-tx-path",
                            "description": "string   file path of the transfer blockchain ownership tx"
                        },
                        {
                            "flag": "-s, --same-control-key",
                            "description": "use the fee-paying key as control key"
                        },
                        {
                            "flag": "-t, --testnet",
                            "description": "fuji            operate on testnet (alias to fuji)"
                        },
                        {
                            "flag": "--threshold",
                            "description": "uint32        required number of control key signatures to make blockchain changes"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "changeWeight": {
                    "description": "The blockchain changeWeight command changes the weight of a L1 Validator.\n\nThe L1 has to be a Proof of Authority L1.",
                    "flags": [
                        {
                            "flag": "--cluster",
                            "description": "string         operate on the given cluster"
                        },
                        {
                            "flag": "--devnet",
                            "description": "operate on a devnet network"
                        },
                        {
                            "flag": "--endpoint",
                            "description": "string        use the given endpoint for network operations"
                        },
                        {
                            "flag": "-e, --ewoq",
                            "description": "use ewoq key [fuji/devnet only]"
                        },
                        {
                            "flag": "-f, --fuji",
                            "description": "testnet           operate on fuji (alias to testnet"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for changeWeight"
                        },
                        {
                            "flag": "-k, --key",
                            "description": "string             select the key to use [fuji/devnet only]"
                        },
                        {
                            "flag": "-g, --ledger",
                            "description": "use ledger instead of key (always true on mainnet, defaults to false on fuji/devnet)"
                        },
                        {
                            "flag": "--ledger-addrs",
                            "description": "strings   use the given ledger addresses"
                        },
                        {
                            "flag": "-l, --local",
                            "description": "operate on a local network"
                        },
                        {
                            "flag": "-m, --mainnet",
                            "description": "operate on mainnet"
                        },
                        {
                            "flag": "--node-id",
                            "description": "string         node-id of the validator"
                        },
                        {
                            "flag": "-t, --testnet",
                            "description": "fuji           operate on testnet (alias to fuji)"
                        },
                        {
                            "flag": "--weight",
                            "description": "uint            set the new staking weight of the validator (default 20)"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "configure": {
                    "description": "AvalancheGo nodes support several different configuration files. Each network (a Subnet or an L1) has their own config which applies to all blockchains/VMs in the network. Each blockchain within the network\ncan have its own chain config. A chain can also have special requirements for the AvalancheGo node \nconfiguration itself. This command allows you to set all those files.",
                    "flags": [
                        {
                            "flag": "--chain-config",
                            "description": "string            path to the chain configuration"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for configure"
                        },
                        {
                            "flag": "--node-config",
                            "description": "string             path to avalanchego node configuration"
                        },
                        {
                            "flag": "--per-node-chain-config",
                            "description": "string   path to per node chain configuration for local network"
                        },
                        {
                            "flag": "--subnet-config",
                            "description": "string           path to the subnet configuration"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "create": {
                    "description": "The blockchain create command builds a new genesis file to configure your Blockchain.\nBy default, the command runs an interactive wizard. It walks you through\nall the steps you need to create your first Blockchain.\n\nThe tool supports deploying Subnet-EVM, and custom VMs. You\ncan create a custom, user-generated genesis with a custom VM by providing\nthe path to your genesis and VM binaries with the --genesis and --vm flags.\n\nBy default, running the command with a blockchainName that already exists\ncauses the command to fail. If you'd like to overwrite an existing\nconfiguration, pass the -f flag.",
                    "flags": [
                        {
                            "flag": "--custom",
                            "description": "use a custom VM template"
                        },
                        {
                            "flag": "--custom-vm-branch",
                            "description": "string          custom vm branch or commit"
                        },
                        {
                            "flag": "--custom-vm-build-script",
                            "description": "string    custom vm build-script"
                        },
                        {
                            "flag": "--custom-vm-path",
                            "description": "string            file path of custom vm to use"
                        },
                        {
                            "flag": "--custom-vm-repo-url",
                            "description": "string        custom vm repository url"
                        },
                        {
                            "flag": "--debug",
                            "description": "enable blockchain debugging (default true)"
                        },
                        {
                            "flag": "--evm",
                            "description": "use the Subnet-EVM as the base template"
                        },
                        {
                            "flag": "--evm-chain-id",
                            "description": "uint                chain ID to use with Subnet-EVM"
                        },
                        {
                            "flag": "--evm-defaults",
                            "description": "deprecation notice: use '--production-defaults'"
                        },
                        {
                            "flag": "--evm-token",
                            "description": "string                 token symbol to use with Subnet-EVM"
                        },
                        {
                            "flag": "--external-gas-token",
                            "description": "use a gas token from another blockchain"
                        },
                        {
                            "flag": "-f, --force",
                            "description": "overwrite the existing configuration if one exists"
                        },
                        {
                            "flag": "--from-github-repo",
                            "description": "generate custom VM binary from github repository"
                        },
                        {
                            "flag": "--genesis",
                            "description": "string                   file path of genesis to use"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for create"
                        },
                        {
                            "flag": "--icm",
                            "description": "interoperate with other blockchains using ICM"
                        },
                        {
                            "flag": "--icm-registry-at-genesis",
                            "description": "setup ICM registry smart contract on genesis [experimental]"
                        },
                        {
                            "flag": "--latest",
                            "description": "use latest Subnet-EVM released version, takes precedence over --vm-version"
                        },
                        {
                            "flag": "--pre-release",
                            "description": "use latest Subnet-EVM pre-released version, takes precedence over --vm-version"
                        },
                        {
                            "flag": "--production-defaults",
                            "description": "use default production settings for your blockchain"
                        },
                        {
                            "flag": "--proof-of-authority",
                            "description": "use proof of authority(PoA) for validator management"
                        },
                        {
                            "flag": "--proof-of-stake",
                            "description": "use proof of stake(PoS) for validator management"
                        },
                        {
                            "flag": "--proxy-contract-owner",
                            "description": "string      EVM address that controls ProxyAdmin for TransparentProxy of ValidatorManager contract"
                        },
                        {
                            "flag": "--reward-basis-points",
                            "description": "uint         (PoS only) reward basis points for PoS Reward Calculator (default 100)"
                        },
                        {
                            "flag": "--sovereign",
                            "description": "set to false if creating non-sovereign blockchain (default true)"
                        },
                        {
                            "flag": "--teleporter",
                            "description": "interoperate with other blockchains using ICM"
                        },
                        {
                            "flag": "--test-defaults",
                            "description": "use default test settings for your blockchain"
                        },
                        {
                            "flag": "--validator-manager-owner",
                            "description": "string   EVM address that controls Validator Manager Owner"
                        },
                        {
                            "flag": "--vm",
                            "description": "string                        file path of custom vm to use. alias to custom-vm-path"
                        },
                        {
                            "flag": "--vm-version",
                            "description": "string                version of Subnet-EVM template to use"
                        },
                        {
                            "flag": "--warp",
                            "description": "generate a vm with warp support (needed for ICM) (default true)"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "delete": {
                    "description": "The blockchain delete command deletes an existing blockchain configuration.",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for delete"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "deploy": {
                    "description": "The blockchain deploy command deploys your Blockchain configuration locally, to Fuji Testnet, or to Mainnet.\n\nAt the end of the call, the command prints the RPC URL you can use to interact with the Subnet.\n\nAvalanche-CLI only supports deploying an individual Blockchain once per network. Subsequent\nattempts to deploy the same Blockchain to the same network (local, Fuji, Mainnet) aren't\nallowed. If you'd like to redeploy a Blockchain locally for testing, you must first call\navalanche network clean to reset all deployed chain state. Subsequent local deploys\nredeploy the chain with fresh state. You can deploy the same Blockchain to multiple networks,\nso you can take your locally tested Blockchain and deploy it on Fuji or Mainnet.",
                    "flags": [
                        {
                            "flag": "--aggregator-allow-private-peers",
                            "description": "allow the signature aggregator to connect to peers with private IP (default true)"
                        },
                        {
                            "flag": "--aggregator-extra-endpoints",
                            "description": "strings                  endpoints for extra nodes that are needed in signature aggregation"
                        },
                        {
                            "flag": "--aggregator-log-level",
                            "description": "string                         log level to use with signature aggregator (default \"Debug\")"
                        },
                        {
                            "flag": "--aggregator-log-to-stdout",
                            "description": "use stdout for signature aggregator logs"
                        },
                        {
                            "flag": "--auth-keys",
                            "description": "strings                                   control keys that will be used to authenticate chain creation"
                        },
                        {
                            "flag": "--avalanchego-path",
                            "description": "string                             use this avalanchego binary path"
                        },
                        {
                            "flag": "--avalanchego-version",
                            "description": "string                          use this version of avalanchego (ex: v1.17.12) (default \"latest-prerelease\")"
                        },
                        {
                            "flag": "--balance",
                            "description": "float                                       set the AVAX balance of each bootstrap validator that will be used for continuous fee on P-Chain (default 0.1)"
                        },
                        {
                            "flag": "--blockchain-genesis-key",
                            "description": "use genesis allocated key to fund validator manager initialization"
                        },
                        {
                            "flag": "--blockchain-key",
                            "description": "string                               CLI stored key to use to fund validator manager initialization"
                        },
                        {
                            "flag": "--blockchain-private-key",
                            "description": "string                       private key to use to fund validator manager initialization"
                        },
                        {
                            "flag": "--bootstrap-endpoints",
                            "description": "strings                         take validator node info from the given endpoints"
                        },
                        {
                            "flag": "--bootstrap-filepath",
                            "description": "string                           JSON file path that provides details about bootstrap validators, leave Node-ID and BLS values empty if using --generate-node-id=true"
                        },
                        {
                            "flag": "--cchain-funding-key",
                            "description": "string                           key to be used to fund relayer account on cchain"
                        },
                        {
                            "flag": "--cchain-icm-key",
                            "description": "string                               key to be used to pay for ICM deploys on C-Chain"
                        },
                        {
                            "flag": "--change-owner-address",
                            "description": "string                         address that will receive change if node is no longer L1 validator"
                        },
                        {
                            "flag": "--cluster",
                            "description": "string                                      operate on the given cluster"
                        },
                        {
                            "flag": "--control-keys",
                            "description": "strings                                addresses that may make blockchain changes"
                        },
                        {
                            "flag": "--convert-only",
                            "description": "avoid node track, restart and poa manager setup"
                        },
                        {
                            "flag": "--devnet",
                            "description": "operate on a devnet network"
                        },
                        {
                            "flag": "--endpoint",
                            "description": "string                                     use the given endpoint for network operations"
                        },
                        {
                            "flag": "-e, --ewoq",
                            "description": "use ewoq key [fuji/devnet deploy only]"
                        },
                        {
                            "flag": "-f, --fuji",
                            "description": "testnet                                        operate on fuji (alias to testnet"
                        },
                        {
                            "flag": "--generate-node-id",
                            "description": "whether to create new node id for bootstrap validators (Node-ID and BLS values in bootstrap JSON file will be overridden if --bootstrap-filepath flag is used)"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for deploy"
                        },
                        {
                            "flag": "--icm-key",
                            "description": "string                                      key to be used to pay for ICM deploys (default \"cli-teleporter-deployer\")"
                        },
                        {
                            "flag": "--icm-version",
                            "description": "string                                  ICM version to deploy (default \"latest\")"
                        },
                        {
                            "flag": "-k, --key",
                            "description": "string                                          select the key to use [fuji/devnet deploy only]"
                        },
                        {
                            "flag": "-g, --ledger",
                            "description": "use ledger instead of key (always true on mainnet, defaults to false on fuji/devnet)"
                        },
                        {
                            "flag": "--ledger-addrs",
                            "description": "strings                                use the given ledger addresses"
                        },
                        {
                            "flag": "-l, --local",
                            "description": "operate on a local network"
                        },
                        {
                            "flag": "-m, --mainnet",
                            "description": "operate on mainnet"
                        },
                        {
                            "flag": "--mainnet-chain-id",
                            "description": "uint32                             use different ChainID for mainnet deployment"
                        },
                        {
                            "flag": "--noicm",
                            "description": "skip automatic ICM deploy"
                        },
                        {
                            "flag": "--num-bootstrap-validators",
                            "description": "int                        (only if --generate-node-id is true) number of bootstrap validators to set up in sovereign L1 validator)"
                        },
                        {
                            "flag": "--num-local-nodes",
                            "description": "int                                 number of nodes to be created on local machine"
                        },
                        {
                            "flag": "--num-nodes",
                            "description": "uint32                                    number of nodes to be created on local network deploy (default 2)"
                        },
                        {
                            "flag": "--output-tx-path",
                            "description": "string                               file path of the blockchain creation tx"
                        },
                        {
                            "flag": "--partial-sync",
                            "description": "set primary network partial sync for new validators (default true)"
                        },
                        {
                            "flag": "--pos-maximum-stake-amount",
                            "description": "uint                       maximum stake amount (default 1000)"
                        },
                        {
                            "flag": "--pos-maximum-stake-multiplier",
                            "description": "uint8                  maximum stake multiplier (default 1)"
                        },
                        {
                            "flag": "--pos-minimum-delegation-fee",
                            "description": "uint16                   minimum delegation fee (default 1)"
                        },
                        {
                            "flag": "--pos-minimum-stake-amount",
                            "description": "uint                       minimum stake amount (default 1)"
                        },
                        {
                            "flag": "--pos-minimum-stake-duration",
                            "description": "uint                     minimum stake duration (default 100)"
                        },
                        {
                            "flag": "--pos-weight-to-value-factor",
                            "description": "uint                     weight to value factor (default 1)"
                        },
                        {
                            "flag": "--relay-cchain",
                            "description": "relay C-Chain as source and destination (default true)"
                        },
                        {
                            "flag": "--relayer-allow-private-ips",
                            "description": "allow relayer to connec to private ips (default true)"
                        },
                        {
                            "flag": "--relayer-amount",
                            "description": "float                                automatically fund relayer fee payments with the given amount"
                        },
                        {
                            "flag": "--relayer-key",
                            "description": "string                                  key to be used by default both for rewards and to pay fees"
                        },
                        {
                            "flag": "--relayer-log-level",
                            "description": "string                            log level to be used for relayer logs (default \"info\")"
                        },
                        {
                            "flag": "--relayer-path",
                            "description": "string                                 relayer binary to use"
                        },
                        {
                            "flag": "--relayer-version",
                            "description": "string                              relayer version to deploy (default \"latest-prerelease\")"
                        },
                        {
                            "flag": "-s, --same-control-key",
                            "description": "use the fee-paying key as control key"
                        },
                        {
                            "flag": "--skip-icm-deploy",
                            "description": "skip automatic ICM deploy"
                        },
                        {
                            "flag": "--skip-local-teleporter",
                            "description": "skip automatic ICM deploy on local networks [to be deprecated]"
                        },
                        {
                            "flag": "--skip-relayer",
                            "description": "skip relayer deploy"
                        },
                        {
                            "flag": "--skip-teleporter-deploy",
                            "description": "skip automatic ICM deploy"
                        },
                        {
                            "flag": "-u, --subnet-id",
                            "description": "string                                    do not create a subnet, deploy the blockchain into the given subnet id"
                        },
                        {
                            "flag": "--subnet-only",
                            "description": "only create a subnet"
                        },
                        {
                            "flag": "--teleporter-messenger-contract-address-path",
                            "description": "string   path to an ICM Messenger contract address file"
                        },
                        {
                            "flag": "--teleporter-messenger-deployer-address-path",
                            "description": "string   path to an ICM Messenger deployer address file"
                        },
                        {
                            "flag": "--teleporter-messenger-deployer-tx-path",
                            "description": "string        path to an ICM Messenger deployer tx file"
                        },
                        {
                            "flag": "--teleporter-registry-bytecode-path",
                            "description": "string            path to an ICM Registry bytecode file"
                        },
                        {
                            "flag": "--teleporter-version",
                            "description": "string                           ICM version to deploy (default \"latest\")"
                        },
                        {
                            "flag": "-t, --testnet",
                            "description": "fuji                                        operate on testnet (alias to fuji)"
                        },
                        {
                            "flag": "--threshold",
                            "description": "uint32                                    required number of control key signatures to make blockchain changes"
                        },
                        {
                            "flag": "--use-local-machine",
                            "description": "use local machine as a blockchain validator"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "describe": {
                    "description": "The blockchain describe command prints the details of a Blockchain configuration to the console.\nBy default, the command prints a summary of the configuration. By providing the --genesis\nflag, the command instead prints out the raw genesis file.",
                    "flags": [
                        {
                            "flag": "-g, --genesis",
                            "description": "Print the genesis to the console directly instead of the summary"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for describe"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "export": {
                    "description": "The blockchain export command write the details of an existing Blockchain deploy to a file.\n\nThe command prompts for an output path. You can also provide one with\nthe --output flag.",
                    "flags": [
                        {
                            "flag": "--custom-vm-branch",
                            "description": "string         custom vm branch"
                        },
                        {
                            "flag": "--custom-vm-build-script",
                            "description": "string   custom vm build-script"
                        },
                        {
                            "flag": "--custom-vm-repo-url",
                            "description": "string       custom vm repository url"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for export"
                        },
                        {
                            "flag": "-o, --output",
                            "description": "string                   write the export data to the provided file path"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "import": {
                    "description": "Import blockchain configurations into avalanche-cli.\n\nThis command suite supports importing from a file created on another computer,\nor importing from blockchains running public networks\n(e.g. created manually or with the deprecated subnet-cli)",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for import"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {
                        "file": {
                            "description": "The blockchain import command will import a blockchain configuration from a file or a git repository.\n\nTo import from a file, you can optionally provide the path as a command-line argument.\nAlternatively, running the command without any arguments triggers an interactive wizard.\nTo import from a repository, go through the wizard. By default, an imported Blockchain doesn't \noverwrite an existing Blockchain with the same name. To allow overwrites, provide the --force\nflag.",
                            "flags": [
                                {
                                    "flag": "--blockchain",
                                    "description": "string   the blockchain configuration to import from the provided repo"
                                },
                                {
                                    "flag": "--branch",
                                    "description": "string       the repo branch to use if downloading a new repo"
                                },
                                {
                                    "flag": "-f, --force",
                                    "description": "overwrite the existing configuration if one exists"
                                },
                                {
                                    "flag": "-h, --help",
                                    "description": "help for file"
                                },
                                {
                                    "flag": "--repo",
                                    "description": "string         the repo to import (ex: ava-labs/avalanche-plugins-core) or url to download the repo from"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        },
                        "public": {
                            "description": "The blockchain import public command imports a Blockchain configuration from a running network.\n\nBy default, an imported Blockchain\ndoesn't overwrite an existing Blockchain with the same name. To allow overwrites, provide the --force\nflag.",
                            "flags": [
                                {
                                    "flag": "--blockchain-id",
                                    "description": "string   the blockchain ID"
                                },
                                {
                                    "flag": "--cluster",
                                    "description": "string         operate on the given cluster"
                                },
                                {
                                    "flag": "--custom",
                                    "description": "use a custom VM template"
                                },
                                {
                                    "flag": "--devnet",
                                    "description": "operate on a devnet network"
                                },
                                {
                                    "flag": "--endpoint",
                                    "description": "string        use the given endpoint for network operations"
                                },
                                {
                                    "flag": "--evm",
                                    "description": "import a subnet-evm"
                                },
                                {
                                    "flag": "--force",
                                    "description": "overwrite the existing configuration if one exists"
                                },
                                {
                                    "flag": "-f, --fuji",
                                    "description": "testnet           operate on fuji (alias to testnet"
                                },
                                {
                                    "flag": "-h, --help",
                                    "description": "help for public"
                                },
                                {
                                    "flag": "-l, --local",
                                    "description": "operate on a local network"
                                },
                                {
                                    "flag": "-m, --mainnet",
                                    "description": "operate on mainnet"
                                },
                                {
                                    "flag": "--node-url",
                                    "description": "string        [optional] URL of an already running validator"
                                },
                                {
                                    "flag": "-t, --testnet",
                                    "description": "fuji           operate on testnet (alias to fuji)"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        }
                    }
                },
                "join": {
                    "description": "The blockchain join command configures your validator node to begin validating a new Blockchain.\n\nTo complete this process, you must have access to the machine running your validator. If the\nCLI is running on the same machine as your validator, it can generate or update your node's\nconfig file automatically. Alternatively, the command can print the necessary instructions\nto update your node manually. To complete the validation process, the Blockchain's admins must add\nthe NodeID of your validator to the Blockchain's allow list by calling addValidator with your\nNodeID.\n\nAfter you update your validator's config, you need to restart your validator manually. If\nyou provide the --avalanchego-config flag, this command attempts to edit the config file\nat that path.\n\nThis command currently only supports Blockchains deployed on the Fuji Testnet and Mainnet.",
                    "flags": [
                        {
                            "flag": "--avalanchego-config",
                            "description": "string   file path of the avalanchego config file"
                        },
                        {
                            "flag": "--cluster",
                            "description": "string              operate on the given cluster"
                        },
                        {
                            "flag": "--data-dir",
                            "description": "string             path of avalanchego's data dir directory"
                        },
                        {
                            "flag": "--devnet",
                            "description": "operate on a devnet network"
                        },
                        {
                            "flag": "--endpoint",
                            "description": "string             use the given endpoint for network operations"
                        },
                        {
                            "flag": "--force-write",
                            "description": "if true, skip to prompt to overwrite the config file"
                        },
                        {
                            "flag": "-f, --fuji",
                            "description": "testnet                operate on fuji (alias to testnet"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for join"
                        },
                        {
                            "flag": "-k, --key",
                            "description": "string                  select the key to use [fuji only]"
                        },
                        {
                            "flag": "-g, --ledger",
                            "description": "use ledger instead of key (always true on mainnet, defaults to false on fuji)"
                        },
                        {
                            "flag": "--ledger-addrs",
                            "description": "strings        use the given ledger addresses"
                        },
                        {
                            "flag": "-l, --local",
                            "description": "operate on a local network"
                        },
                        {
                            "flag": "-m, --mainnet",
                            "description": "operate on mainnet"
                        },
                        {
                            "flag": "--node-id",
                            "description": "string              set the NodeID of the validator to check"
                        },
                        {
                            "flag": "--plugin-dir",
                            "description": "string           file path of avalanchego's plugin directory"
                        },
                        {
                            "flag": "--print",
                            "description": "if true, print the manual config without prompting"
                        },
                        {
                            "flag": "--stake-amount",
                            "description": "uint           amount of tokens to stake on validator"
                        },
                        {
                            "flag": "--staking-period",
                            "description": "duration     how long validator validates for after start time"
                        },
                        {
                            "flag": "--start-time",
                            "description": "string           start time that validator starts validating"
                        },
                        {
                            "flag": "-t, --testnet",
                            "description": "fuji                operate on testnet (alias to fuji)"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "list": {
                    "description": "The blockchain list command prints the names of all created Blockchain configurations. Without any flags,\nit prints some general, static information about the Blockchain. With the --deployed flag, the command\nshows additional information including the VMID, BlockchainID and SubnetID.",
                    "flags": [
                        {
                            "flag": "--deployed",
                            "description": "show additional deploy information"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for list"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "publish": {
                    "description": "The blockchain publish command publishes the Blockchain's VM to a repository.",
                    "flags": [
                        {
                            "flag": "--alias",
                            "description": "string              We publish to a remote repo, but identify the repo locally under a user-provided alias (e.g. myrepo)."
                        },
                        {
                            "flag": "--force",
                            "description": "If true, ignores if the blockchain has been published in the past, and attempts a forced publish."
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for publish"
                        },
                        {
                            "flag": "--no-repo-path",
                            "description": "string       Do not let the tool manage file publishing, but have it only generate the files and put them in the location given by this flag."
                        },
                        {
                            "flag": "--repo-url",
                            "description": "string           The URL of the repo where we are publishing"
                        },
                        {
                            "flag": "--subnet-file-path",
                            "description": "string   Path to the Blockchain description file. If not given, a prompting sequence will be initiated."
                        },
                        {
                            "flag": "--vm-file-path",
                            "description": "string       Path to the VM description file. If not given, a prompting sequence will be initiated."
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "removeValidator": {
                    "description": "The blockchain removeValidator command stops a whitelisted blockchain network validator from\nvalidating your deployed Blockchain.\n\nTo remove the validator from the Subnet's allow list, provide the validator's unique NodeID. You can bypass\nthese prompts by providing the values with flags.",
                    "flags": [
                        {
                            "flag": "--aggregator-allow-private-peers",
                            "description": "allow the signature aggregator to connect to peers with private IP (default true)"
                        },
                        {
                            "flag": "--aggregator-extra-endpoints",
                            "description": "strings   endpoints for extra nodes that are needed in signature aggregation"
                        },
                        {
                            "flag": "--aggregator-log-level",
                            "description": "string          log level to use with signature aggregator (default \"Debug\")"
                        },
                        {
                            "flag": "--aggregator-log-to-stdout",
                            "description": "use stdout for signature aggregator logs"
                        },
                        {
                            "flag": "--auth-keys",
                            "description": "strings                    (for non-SOV blockchain only) control keys that will be used to authenticate the removeValidator tx"
                        },
                        {
                            "flag": "--blockchain-genesis-key",
                            "description": "use genesis allocated key to pay fees for completing the validator's removal (blockchain gas token)"
                        },
                        {
                            "flag": "--blockchain-key",
                            "description": "string                CLI stored key to use to pay fees for completing the validator's removal (blockchain gas token)"
                        },
                        {
                            "flag": "--blockchain-private-key",
                            "description": "string        private key to use to pay fees for completing the validator's removal (blockchain gas token)"
                        },
                        {
                            "flag": "--cluster",
                            "description": "string                       operate on the given cluster"
                        },
                        {
                            "flag": "--devnet",
                            "description": "operate on a devnet network"
                        },
                        {
                            "flag": "--endpoint",
                            "description": "string                      use the given endpoint for network operations"
                        },
                        {
                            "flag": "--force",
                            "description": "force validator removal even if it's not getting rewarded"
                        },
                        {
                            "flag": "-f, --fuji",
                            "description": "testnet                         operate on fuji (alias to testnet"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for removeValidator"
                        },
                        {
                            "flag": "-k, --key",
                            "description": "string                           select the key to use [fuji deploy only]"
                        },
                        {
                            "flag": "-g, --ledger",
                            "description": "use ledger instead of key (always true on mainnet, defaults to false on fuji)"
                        },
                        {
                            "flag": "--ledger-addrs",
                            "description": "strings                 use the given ledger addresses"
                        },
                        {
                            "flag": "-l, --local",
                            "description": "operate on a local network"
                        },
                        {
                            "flag": "-m, --mainnet",
                            "description": "operate on mainnet"
                        },
                        {
                            "flag": "--node-endpoint",
                            "description": "string                 remove validator that responds to the given endpoint"
                        },
                        {
                            "flag": "--node-id",
                            "description": "string                       node-id of the validator"
                        },
                        {
                            "flag": "--output-tx-path",
                            "description": "string                (for non-SOV blockchain only) file path of the removeValidator tx"
                        },
                        {
                            "flag": "--rpc",
                            "description": "string                           connect to validator manager at the given rpc endpoint"
                        },
                        {
                            "flag": "-t, --testnet",
                            "description": "fuji                         operate on testnet (alias to fuji)"
                        },
                        {
                            "flag": "--uptime",
                            "description": "uint                          validator's uptime in seconds. If not provided, it will be automatically calculated"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "stats": {
                    "description": "The blockchain stats command prints validator statistics for the given Blockchain.",
                    "flags": [
                        {
                            "flag": "--cluster",
                            "description": "string    operate on the given cluster"
                        },
                        {
                            "flag": "--devnet",
                            "description": "operate on a devnet network"
                        },
                        {
                            "flag": "--endpoint",
                            "description": "string   use the given endpoint for network operations"
                        },
                        {
                            "flag": "-f, --fuji",
                            "description": "testnet      operate on fuji (alias to testnet"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for stats"
                        },
                        {
                            "flag": "-l, --local",
                            "description": "operate on a local network"
                        },
                        {
                            "flag": "-m, --mainnet",
                            "description": "operate on mainnet"
                        },
                        {
                            "flag": "-t, --testnet",
                            "description": "fuji      operate on testnet (alias to fuji)"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "upgrade": {
                    "description": "The blockchain upgrade command suite provides a collection of tools for\nupdating your developmental and deployed Blockchains.",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for upgrade"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {
                        "apply": {
                            "description": "Apply generated upgrade bytes to running Blockchain nodes to trigger a network upgrade.\n\nFor public networks (Fuji Testnet or Mainnet), to complete this process,\nyou must have access to the machine running your validator.\nIf the CLI is running on the same machine as your validator, it can manipulate your node's\nconfiguration automatically. Alternatively, the command can print the necessary instructions\nto upgrade your node manually.\n\nAfter you update your validator's configuration, you need to restart your validator manually.\nIf you provide the --avalanchego-chain-config-dir flag, this command attempts to write the upgrade file at that path.\nRefer to https://docs.avax.network/nodes/maintain/chain-config-flags#subnet-chain-configs for related documentation.",
                            "flags": [
                                {
                                    "flag": "--avalanchego-chain-config-dir",
                                    "description": "string   avalanchego's chain config file directory (default \"/home/runner/.avalanchego/chains\")"
                                },
                                {
                                    "flag": "--config",
                                    "description": "create upgrade config for future subnet deployments (same as generate)"
                                },
                                {
                                    "flag": "--force",
                                    "description": "If true, don't prompt for confirmation of timestamps in the past"
                                },
                                {
                                    "flag": "--fuji",
                                    "description": "fuji                             apply upgrade existing fuji deployment (alias for `testnet`)"
                                },
                                {
                                    "flag": "-h, --help",
                                    "description": "help for apply"
                                },
                                {
                                    "flag": "--local",
                                    "description": "local                           apply upgrade existing local deployment"
                                },
                                {
                                    "flag": "--mainnet",
                                    "description": "mainnet                       apply upgrade existing mainnet deployment"
                                },
                                {
                                    "flag": "--print",
                                    "description": "if true, print the manual config without prompting (for public networks only)"
                                },
                                {
                                    "flag": "--testnet",
                                    "description": "testnet                       apply upgrade existing testnet deployment (alias for `fuji`)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        },
                        "export": {
                            "description": "Export the upgrade bytes file to a location of choice on disk",
                            "flags": [
                                {
                                    "flag": "--force",
                                    "description": "If true, overwrite a possibly existing file without prompting"
                                },
                                {
                                    "flag": "-h, --help",
                                    "description": "help for export"
                                },
                                {
                                    "flag": "--upgrade-filepath",
                                    "description": "string   Export upgrade bytes file to location of choice on disk"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        },
                        "generate": {
                            "description": "The blockchain upgrade generate command builds a new upgrade.json file to customize your Blockchain. It\nguides the user through the process using an interactive wizard.",
                            "flags": [
                                {
                                    "flag": "-h, --help",
                                    "description": "help for generate"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        },
                        "import": {
                            "description": "Import the upgrade bytes file into the local environment",
                            "flags": [
                                {
                                    "flag": "-h, --help",
                                    "description": "help for import"
                                },
                                {
                                    "flag": "--upgrade-filepath",
                                    "description": "string   Import upgrade bytes file into local environment"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        },
                        "print": {
                            "description": "Print the upgrade.json file content",
                            "flags": [
                                {
                                    "flag": "-h, --help",
                                    "description": "help for print"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        },
                        "vm": {
                            "description": "The blockchain upgrade vm command enables the user to upgrade their Blockchain's VM binary. The command\ncan upgrade both local Blockchains and publicly deployed Blockchains on Fuji and Mainnet.\n\nThe command walks the user through an interactive wizard. The user can skip the wizard by providing\ncommand line flags.",
                            "flags": [
                                {
                                    "flag": "--binary",
                                    "description": "string       Upgrade to custom binary"
                                },
                                {
                                    "flag": "--config",
                                    "description": "upgrade config for future subnet deployments"
                                },
                                {
                                    "flag": "--fuji",
                                    "description": "fuji           upgrade existing fuji deployment (alias for `testnet`)"
                                },
                                {
                                    "flag": "-h, --help",
                                    "description": "help for vm"
                                },
                                {
                                    "flag": "--latest",
                                    "description": "upgrade to latest version"
                                },
                                {
                                    "flag": "--local",
                                    "description": "local         upgrade existing local deployment"
                                },
                                {
                                    "flag": "--mainnet",
                                    "description": "mainnet     upgrade existing mainnet deployment"
                                },
                                {
                                    "flag": "--plugin-dir",
                                    "description": "string   plugin directory to automatically upgrade VM"
                                },
                                {
                                    "flag": "--print",
                                    "description": "print instructions for upgrading"
                                },
                                {
                                    "flag": "--testnet",
                                    "description": "testnet     upgrade existing testnet deployment (alias for `fuji`)"
                                },
                                {
                                    "flag": "--version",
                                    "description": "string      Upgrade to custom version"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        }
                    }
                },
                "validators": {
                    "description": "The blockchain validators command lists the validators of a blockchain and provides\nseveral statistics about them.",
                    "flags": [
                        {
                            "flag": "--cluster",
                            "description": "string    operate on the given cluster"
                        },
                        {
                            "flag": "--devnet",
                            "description": "operate on a devnet network"
                        },
                        {
                            "flag": "--endpoint",
                            "description": "string   use the given endpoint for network operations"
                        },
                        {
                            "flag": "-f, --fuji",
                            "description": "testnet      operate on fuji (alias to testnet"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for validators"
                        },
                        {
                            "flag": "-l, --local",
                            "description": "operate on a local network"
                        },
                        {
                            "flag": "-m, --mainnet",
                            "description": "operate on mainnet"
                        },
                        {
                            "flag": "-t, --testnet",
                            "description": "fuji      operate on testnet (alias to fuji)"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "vmid": {
                    "description": "The blockchain vmid command prints the virtual machine ID (VMID) for the given Blockchain.",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for vmid"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                }
            }
        },
        "config": {
            "description": "Customize configuration for Avalanche-CLI",
            "flags": [
                {
                    "flag": "-h, --help",
                    "description": "help for config"
                },
                {
                    "flag": "--config",
                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                },
                {
                    "flag": "--log-level",
                    "description": "string    log level for the application (default \"ERROR\")"
                },
                {
                    "flag": "--skip-update-check",
                    "description": "skip check for new versions"
                }
            ],
            "subcommands": {
                "authorize-cloud-access": {
                    "description": "set preferences to authorize access to cloud resources",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for authorize-cloud-access"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "metrics": {
                    "description": "set user metrics collection preferences",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for metrics"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "migrate": {
                    "description": "migrate command migrates old ~/.avalanche-cli.json and ~/.avalanche-cli/config to /.avalanche-cli/config.json..",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for migrate"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "snapshotsAutoSave": {
                    "description": "set user preference between auto saving local network snapshots or not",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for snapshotsAutoSave"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "update": {
                    "description": "set user preference between update check or not",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for update"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                }
            }
        },
        "contract": {
            "description": "The contract command suite provides a collection of tools for deploying\nand interacting with smart contracts.",
            "flags": [
                {
                    "flag": "-h, --help",
                    "description": "help for contract"
                },
                {
                    "flag": "--config",
                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                },
                {
                    "flag": "--log-level",
                    "description": "string    log level for the application (default \"ERROR\")"
                },
                {
                    "flag": "--skip-update-check",
                    "description": "skip check for new versions"
                }
            ],
            "subcommands": {
                "deploy": {
                    "description": "The contract command suite provides a collection of tools for deploying\nsmart contracts.",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for deploy"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {
                        "erc20": {
                            "description": "Deploy an ERC20 token into a given Network and Blockchain",
                            "flags": [
                                {
                                    "flag": "--blockchain",
                                    "description": "string      deploy the ERC20 contract into the given CLI blockchain"
                                },
                                {
                                    "flag": "--blockchain-id",
                                    "description": "string   deploy the ERC20 contract into the given blockchain ID/Alias"
                                },
                                {
                                    "flag": "--c-chain",
                                    "description": "deploy the ERC20 contract into C-Chain"
                                },
                                {
                                    "flag": "--cluster",
                                    "description": "string         operate on the given cluster"
                                },
                                {
                                    "flag": "--devnet",
                                    "description": "operate on a devnet network"
                                },
                                {
                                    "flag": "--endpoint",
                                    "description": "string        use the given endpoint for network operations"
                                },
                                {
                                    "flag": "-f, --fuji",
                                    "description": "testnet           operate on fuji (alias to testnet"
                                },
                                {
                                    "flag": "--funded",
                                    "description": "string          set the funded address"
                                },
                                {
                                    "flag": "--genesis-key",
                                    "description": "use genesis allocated key as contract deployer"
                                },
                                {
                                    "flag": "-h, --help",
                                    "description": "help for erc20"
                                },
                                {
                                    "flag": "--key",
                                    "description": "string             CLI stored key to use as contract deployer"
                                },
                                {
                                    "flag": "-l, --local",
                                    "description": "operate on a local network"
                                },
                                {
                                    "flag": "--private-key",
                                    "description": "string     private key to use as contract deployer"
                                },
                                {
                                    "flag": "--rpc",
                                    "description": "string             deploy the contract into the given rpc endpoint"
                                },
                                {
                                    "flag": "--supply",
                                    "description": "uint            set the token supply"
                                },
                                {
                                    "flag": "--symbol",
                                    "description": "string          set the token symbol"
                                },
                                {
                                    "flag": "-t, --testnet",
                                    "description": "fuji           operate on testnet (alias to fuji)"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        }
                    }
                },
                "initValidatorManager": {
                    "description": "Initializes Proof of Authority(PoA) or Proof of Stake(PoS)Validator Manager contract on a Blockchain and sets up initial validator set on the Blockchain. For more info on Validator Manager, please head to https://github.com/ava-labs/icm-contracts/tree/main/contracts/validator-manager",
                    "flags": [
                        {
                            "flag": "--aggregator-allow-private-peers",
                            "description": "allow the signature aggregator to connect to peers with private IP (default true)"
                        },
                        {
                            "flag": "--aggregator-extra-endpoints",
                            "description": "strings     endpoints for extra nodes that are needed in signature aggregation"
                        },
                        {
                            "flag": "--aggregator-log-level",
                            "description": "string            log level to use with signature aggregator (default \"Debug\")"
                        },
                        {
                            "flag": "--aggregator-log-to-stdout",
                            "description": "dump signature aggregator logs to stdout"
                        },
                        {
                            "flag": "--cluster",
                            "description": "string                         operate on the given cluster"
                        },
                        {
                            "flag": "--devnet",
                            "description": "operate on a devnet network"
                        },
                        {
                            "flag": "--endpoint",
                            "description": "string                        use the given endpoint for network operations"
                        },
                        {
                            "flag": "-f, --fuji",
                            "description": "testnet                           operate on fuji (alias to testnet"
                        },
                        {
                            "flag": "--genesis-key",
                            "description": "use genesis allocated key as contract deployer"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for initValidatorManager"
                        },
                        {
                            "flag": "--key",
                            "description": "string                             CLI stored key to use as contract deployer"
                        },
                        {
                            "flag": "-l, --local",
                            "description": "operate on a local network"
                        },
                        {
                            "flag": "-m, --mainnet",
                            "description": "operate on mainnet"
                        },
                        {
                            "flag": "--pos-maximum-stake-amount",
                            "description": "uint          (PoS only) maximum stake amount (default 1000)"
                        },
                        {
                            "flag": "--pos-maximum-stake-multiplier",
                            "description": "uint8     (PoS only )maximum stake multiplier (default 1)"
                        },
                        {
                            "flag": "--pos-minimum-delegation-fee",
                            "description": "uint16      (PoS only) minimum delegation fee (default 1)"
                        },
                        {
                            "flag": "--pos-minimum-stake-amount",
                            "description": "uint          (PoS only) minimum stake amount (default 1)"
                        },
                        {
                            "flag": "--pos-minimum-stake-duration",
                            "description": "uint        (PoS only) minimum stake duration (default 100)"
                        },
                        {
                            "flag": "--pos-reward-calculator-address",
                            "description": "string   (PoS only) initialize the ValidatorManager with reward calculator address"
                        },
                        {
                            "flag": "--pos-weight-to-value-factor",
                            "description": "uint        (PoS only) weight to value factor (default 1)"
                        },
                        {
                            "flag": "--private-key",
                            "description": "string                     private key to use as contract deployer"
                        },
                        {
                            "flag": "--rpc",
                            "description": "string                             deploy the contract into the given rpc endpoint"
                        },
                        {
                            "flag": "-t, --testnet",
                            "description": "fuji                           operate on testnet (alias to fuji)"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                }
            }
        },
        "help": {
            "description": "Help provides help for any command in the application.\nSimply type avalanche help [path to command] for full details.",
            "flags": [
                {
                    "flag": "-h, --help",
                    "description": "help for help"
                },
                {
                    "flag": "--config",
                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                },
                {
                    "flag": "--log-level",
                    "description": "string    log level for the application (default \"ERROR\")"
                },
                {
                    "flag": "--skip-update-check",
                    "description": "skip check for new versions"
                }
            ],
            "subcommands": {}
        },
        "icm": {
            "description": "The messenger command suite provides a collection of tools for interacting\nwith ICM messenger contracts.",
            "flags": [
                {
                    "flag": "-h, --help",
                    "description": "help for icm"
                },
                {
                    "flag": "--config",
                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                },
                {
                    "flag": "--log-level",
                    "description": "string    log level for the application (default \"ERROR\")"
                },
                {
                    "flag": "--skip-update-check",
                    "description": "skip check for new versions"
                }
            ],
            "subcommands": {
                "deploy": {
                    "description": "Deploys ICM Messenger and Registry into a given L1.",
                    "flags": [
                        {
                            "flag": "--blockchain",
                            "description": "string                        deploy ICM into the given CLI blockchain"
                        },
                        {
                            "flag": "--blockchain-id",
                            "description": "string                     deploy ICM into the given blockchain ID/Alias"
                        },
                        {
                            "flag": "--c-chain",
                            "description": "deploy ICM into C-Chain"
                        },
                        {
                            "flag": "--cchain-key",
                            "description": "string                        key to be used to pay fees to deploy ICM to C-Chain"
                        },
                        {
                            "flag": "--cluster",
                            "description": "string                           operate on the given cluster"
                        },
                        {
                            "flag": "--deploy-messenger",
                            "description": "deploy ICM Messenger (default true)"
                        },
                        {
                            "flag": "--deploy-registry",
                            "description": "deploy ICM Registry (default true)"
                        },
                        {
                            "flag": "--devnet",
                            "description": "operate on a devnet network"
                        },
                        {
                            "flag": "--endpoint",
                            "description": "string                          use the given endpoint for network operations"
                        },
                        {
                            "flag": "--force-registry-deploy",
                            "description": "deploy ICM Registry even if Messenger has already been deployed"
                        },
                        {
                            "flag": "-f, --fuji",
                            "description": "testnet                             operate on fuji (alias to testnet"
                        },
                        {
                            "flag": "--genesis-key",
                            "description": "use genesis allocated key to fund ICM deploy"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for deploy"
                        },
                        {
                            "flag": "--include-cchain",
                            "description": "deploy ICM also to C-Chain"
                        },
                        {
                            "flag": "--key",
                            "description": "string                               CLI stored key to use to fund ICM deploy"
                        },
                        {
                            "flag": "-l, --local",
                            "description": "operate on a local network"
                        },
                        {
                            "flag": "--messenger-contract-address-path",
                            "description": "string   path to a messenger contract address file"
                        },
                        {
                            "flag": "--messenger-deployer-address-path",
                            "description": "string   path to a messenger deployer address file"
                        },
                        {
                            "flag": "--messenger-deployer-tx-path",
                            "description": "string        path to a messenger deployer tx file"
                        },
                        {
                            "flag": "--private-key",
                            "description": "string                       private key to use to fund ICM deploy"
                        },
                        {
                            "flag": "--registry-bytecode-path",
                            "description": "string            path to a registry bytecode file"
                        },
                        {
                            "flag": "--rpc-url",
                            "description": "string                           use the given RPC URL to connect to the subnet"
                        },
                        {
                            "flag": "-t, --testnet",
                            "description": "fuji                             operate on testnet (alias to fuji)"
                        },
                        {
                            "flag": "--version",
                            "description": "string                           version to deploy (default \"latest\")"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "sendMsg": {
                    "description": "Sends and wait reception for a ICM msg between two blockchains.",
                    "flags": [
                        {
                            "flag": "--cluster",
                            "description": "string               operate on the given cluster"
                        },
                        {
                            "flag": "--dest-rpc",
                            "description": "string              use the given destination blockchain rpc endpoint"
                        },
                        {
                            "flag": "--destination-address",
                            "description": "string   deliver the message to the given contract destination address"
                        },
                        {
                            "flag": "--devnet",
                            "description": "operate on a devnet network"
                        },
                        {
                            "flag": "--endpoint",
                            "description": "string              use the given endpoint for network operations"
                        },
                        {
                            "flag": "-f, --fuji",
                            "description": "testnet                 operate on fuji (alias to testnet"
                        },
                        {
                            "flag": "--genesis-key",
                            "description": "use genesis allocated key as message originator and to pay source blockchain fees"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for sendMsg"
                        },
                        {
                            "flag": "--hex-encoded",
                            "description": "given message is hex encoded"
                        },
                        {
                            "flag": "--key",
                            "description": "string                   CLI stored key to use as message originator and to pay source blockchain fees"
                        },
                        {
                            "flag": "-l, --local",
                            "description": "operate on a local network"
                        },
                        {
                            "flag": "--private-key",
                            "description": "string           private key to use as message originator and to pay source blockchain fees"
                        },
                        {
                            "flag": "--source-rpc",
                            "description": "string            use the given source blockchain rpc endpoint"
                        },
                        {
                            "flag": "-t, --testnet",
                            "description": "fuji                 operate on testnet (alias to fuji)"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                }
            }
        },
        "ictt": {
            "description": "The ictt command suite provides tools to deploy and manage Interchain Token Transferrers.",
            "flags": [
                {
                    "flag": "-h, --help",
                    "description": "help for ictt"
                },
                {
                    "flag": "--config",
                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                },
                {
                    "flag": "--log-level",
                    "description": "string    log level for the application (default \"ERROR\")"
                },
                {
                    "flag": "--skip-update-check",
                    "description": "skip check for new versions"
                }
            ],
            "subcommands": {
                "deploy": {
                    "description": "Deploys a Token Transferrer into a given Network and Subnets",
                    "flags": [
                        {
                            "flag": "--c-chain-home",
                            "description": "set the Transferrer's Home Chain into C-Chain"
                        },
                        {
                            "flag": "--c-chain-remote",
                            "description": "set the Transferrer's Remote Chain into C-Chain"
                        },
                        {
                            "flag": "--cluster",
                            "description": "string                operate on the given cluster"
                        },
                        {
                            "flag": "--deploy-erc20-home",
                            "description": "string      deploy a Transferrer Home for the given Chain's ERC20 Token"
                        },
                        {
                            "flag": "--deploy-native-home",
                            "description": "deploy a Transferrer Home for the Chain's Native Token"
                        },
                        {
                            "flag": "--deploy-native-remote",
                            "description": "deploy a Transferrer Remote for the Chain's Native Token"
                        },
                        {
                            "flag": "--devnet",
                            "description": "operate on a devnet network"
                        },
                        {
                            "flag": "--endpoint",
                            "description": "string               use the given endpoint for network operations"
                        },
                        {
                            "flag": "-f, --fuji",
                            "description": "testnet                  operate on fuji (alias to testnet"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for deploy"
                        },
                        {
                            "flag": "--home-blockchain",
                            "description": "string        set the Transferrer's Home Chain into the given CLI blockchain"
                        },
                        {
                            "flag": "--home-genesis-key",
                            "description": "use genesis allocated key to deploy Transferrer Home"
                        },
                        {
                            "flag": "--home-key",
                            "description": "string               CLI stored key to use to deploy Transferrer Home"
                        },
                        {
                            "flag": "--home-private-key",
                            "description": "string       private key to use to deploy Transferrer Home"
                        },
                        {
                            "flag": "--home-rpc",
                            "description": "string               use the given RPC URL to connect to the home blockchain"
                        },
                        {
                            "flag": "-l, --local",
                            "description": "operate on a local network"
                        },
                        {
                            "flag": "--remote-blockchain",
                            "description": "string      set the Transferrer's Remote Chain into the given CLI blockchain"
                        },
                        {
                            "flag": "--remote-genesis-key",
                            "description": "use genesis allocated key to deploy Transferrer Remote"
                        },
                        {
                            "flag": "--remote-key",
                            "description": "string             CLI stored key to use to deploy Transferrer Remote"
                        },
                        {
                            "flag": "--remote-private-key",
                            "description": "string     private key to use to deploy Transferrer Remote"
                        },
                        {
                            "flag": "--remote-rpc",
                            "description": "string             use the given RPC URL to connect to the remote blockchain"
                        },
                        {
                            "flag": "--remote-token-decimals",
                            "description": "uint8   use the given number of token decimals for the Transferrer Remote [defaults to token home's decimals (18 for a new wrapped native home token)]"
                        },
                        {
                            "flag": "--remove-minter-admin",
                            "description": "remove the native minter precompile admin found on remote blockchain genesis"
                        },
                        {
                            "flag": "-t, --testnet",
                            "description": "fuji                  operate on testnet (alias to fuji)"
                        },
                        {
                            "flag": "--use-home",
                            "description": "string               use the given Transferrer's Home Address"
                        },
                        {
                            "flag": "--version",
                            "description": "string                tag/branch/commit of Avalanche Interchain Token Transfer (ICTT) to be used (defaults to main branch)"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                }
            }
        },
        "interchain": {
            "description": "The interchain command suite provides a collection of tools to\nset and manage interoperability between blockchains.",
            "flags": [
                {
                    "flag": "-h, --help",
                    "description": "help for interchain"
                },
                {
                    "flag": "--config",
                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                },
                {
                    "flag": "--log-level",
                    "description": "string    log level for the application (default \"ERROR\")"
                },
                {
                    "flag": "--skip-update-check",
                    "description": "skip check for new versions"
                }
            ],
            "subcommands": {
                "messenger": {
                    "description": "The messenger command suite provides a collection of tools for interacting\nwith ICM messenger contracts.",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for messenger"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {
                        "deploy": {
                            "description": "Deploys ICM Messenger and Registry into a given L1.",
                            "flags": [
                                {
                                    "flag": "--blockchain",
                                    "description": "string                        deploy ICM into the given CLI blockchain"
                                },
                                {
                                    "flag": "--blockchain-id",
                                    "description": "string                     deploy ICM into the given blockchain ID/Alias"
                                },
                                {
                                    "flag": "--c-chain",
                                    "description": "deploy ICM into C-Chain"
                                },
                                {
                                    "flag": "--cchain-key",
                                    "description": "string                        key to be used to pay fees to deploy ICM to C-Chain"
                                },
                                {
                                    "flag": "--cluster",
                                    "description": "string                           operate on the given cluster"
                                },
                                {
                                    "flag": "--deploy-messenger",
                                    "description": "deploy ICM Messenger (default true)"
                                },
                                {
                                    "flag": "--deploy-registry",
                                    "description": "deploy ICM Registry (default true)"
                                },
                                {
                                    "flag": "--devnet",
                                    "description": "operate on a devnet network"
                                },
                                {
                                    "flag": "--endpoint",
                                    "description": "string                          use the given endpoint for network operations"
                                },
                                {
                                    "flag": "--force-registry-deploy",
                                    "description": "deploy ICM Registry even if Messenger has already been deployed"
                                },
                                {
                                    "flag": "-f, --fuji",
                                    "description": "testnet                             operate on fuji (alias to testnet"
                                },
                                {
                                    "flag": "--genesis-key",
                                    "description": "use genesis allocated key to fund ICM deploy"
                                },
                                {
                                    "flag": "-h, --help",
                                    "description": "help for deploy"
                                },
                                {
                                    "flag": "--include-cchain",
                                    "description": "deploy ICM also to C-Chain"
                                },
                                {
                                    "flag": "--key",
                                    "description": "string                               CLI stored key to use to fund ICM deploy"
                                },
                                {
                                    "flag": "-l, --local",
                                    "description": "operate on a local network"
                                },
                                {
                                    "flag": "--messenger-contract-address-path",
                                    "description": "string   path to a messenger contract address file"
                                },
                                {
                                    "flag": "--messenger-deployer-address-path",
                                    "description": "string   path to a messenger deployer address file"
                                },
                                {
                                    "flag": "--messenger-deployer-tx-path",
                                    "description": "string        path to a messenger deployer tx file"
                                },
                                {
                                    "flag": "--private-key",
                                    "description": "string                       private key to use to fund ICM deploy"
                                },
                                {
                                    "flag": "--registry-bytecode-path",
                                    "description": "string            path to a registry bytecode file"
                                },
                                {
                                    "flag": "--rpc-url",
                                    "description": "string                           use the given RPC URL to connect to the subnet"
                                },
                                {
                                    "flag": "-t, --testnet",
                                    "description": "fuji                             operate on testnet (alias to fuji)"
                                },
                                {
                                    "flag": "--version",
                                    "description": "string                           version to deploy (default \"latest\")"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        },
                        "sendMsg": {
                            "description": "Sends and wait reception for a ICM msg between two blockchains.",
                            "flags": [
                                {
                                    "flag": "--cluster",
                                    "description": "string               operate on the given cluster"
                                },
                                {
                                    "flag": "--dest-rpc",
                                    "description": "string              use the given destination blockchain rpc endpoint"
                                },
                                {
                                    "flag": "--destination-address",
                                    "description": "string   deliver the message to the given contract destination address"
                                },
                                {
                                    "flag": "--devnet",
                                    "description": "operate on a devnet network"
                                },
                                {
                                    "flag": "--endpoint",
                                    "description": "string              use the given endpoint for network operations"
                                },
                                {
                                    "flag": "-f, --fuji",
                                    "description": "testnet                 operate on fuji (alias to testnet"
                                },
                                {
                                    "flag": "--genesis-key",
                                    "description": "use genesis allocated key as message originator and to pay source blockchain fees"
                                },
                                {
                                    "flag": "-h, --help",
                                    "description": "help for sendMsg"
                                },
                                {
                                    "flag": "--hex-encoded",
                                    "description": "given message is hex encoded"
                                },
                                {
                                    "flag": "--key",
                                    "description": "string                   CLI stored key to use as message originator and to pay source blockchain fees"
                                },
                                {
                                    "flag": "-l, --local",
                                    "description": "operate on a local network"
                                },
                                {
                                    "flag": "--private-key",
                                    "description": "string           private key to use as message originator and to pay source blockchain fees"
                                },
                                {
                                    "flag": "--source-rpc",
                                    "description": "string            use the given source blockchain rpc endpoint"
                                },
                                {
                                    "flag": "-t, --testnet",
                                    "description": "fuji                 operate on testnet (alias to fuji)"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        }
                    }
                },
                "relayer": {
                    "description": "The relayer command suite provides a collection of tools for deploying\nand configuring an ICM relayers.",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for relayer"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {
                        "deploy": {
                            "description": "Deploys an ICM Relayer for the given Network.",
                            "flags": [
                                {
                                    "flag": "--allow-private-ips",
                                    "description": "allow relayer to connec to private ips (default true)"
                                },
                                {
                                    "flag": "--amount",
                                    "description": "float                    automatically fund l1s fee payments with the given amount"
                                },
                                {
                                    "flag": "--bin-path",
                                    "description": "string                 use the given relayer binary"
                                },
                                {
                                    "flag": "--blockchain-funding-key",
                                    "description": "string   key to be used to fund relayer account on all l1s"
                                },
                                {
                                    "flag": "--blockchains",
                                    "description": "strings             blockchains to relay as source and destination"
                                },
                                {
                                    "flag": "--cchain",
                                    "description": "relay C-Chain as source and destination"
                                },
                                {
                                    "flag": "--cchain-amount",
                                    "description": "float             automatically fund cchain fee payments with the given amount"
                                },
                                {
                                    "flag": "--cchain-funding-key",
                                    "description": "string       key to be used to fund relayer account on cchain"
                                },
                                {
                                    "flag": "--cluster",
                                    "description": "string                  operate on the given cluster"
                                },
                                {
                                    "flag": "--devnet",
                                    "description": "operate on a devnet network"
                                },
                                {
                                    "flag": "--endpoint",
                                    "description": "string                 use the given endpoint for network operations"
                                },
                                {
                                    "flag": "-f, --fuji",
                                    "description": "testnet                    operate on fuji (alias to testnet"
                                },
                                {
                                    "flag": "-h, --help",
                                    "description": "help for deploy"
                                },
                                {
                                    "flag": "--key",
                                    "description": "string                      key to be used by default both for rewards and to pay fees"
                                },
                                {
                                    "flag": "-l, --local",
                                    "description": "operate on a local network"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string                log level to use for relayer logs"
                                },
                                {
                                    "flag": "-t, --testnet",
                                    "description": "fuji                    operate on testnet (alias to fuji)"
                                },
                                {
                                    "flag": "--version",
                                    "description": "string                  version to deploy (default \"latest-prerelease\")"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        },
                        "logs": {
                            "description": "Shows pretty formatted AWM relayer logs",
                            "flags": [
                                {
                                    "flag": "--endpoint",
                                    "description": "string   use the given endpoint for network operations"
                                },
                                {
                                    "flag": "--first",
                                    "description": "uint        output first N log lines"
                                },
                                {
                                    "flag": "-f, --fuji",
                                    "description": "testnet      operate on fuji (alias to testnet"
                                },
                                {
                                    "flag": "-h, --help",
                                    "description": "help for logs"
                                },
                                {
                                    "flag": "--last",
                                    "description": "uint         output last N log lines"
                                },
                                {
                                    "flag": "-l, --local",
                                    "description": "operate on a local network"
                                },
                                {
                                    "flag": "--raw",
                                    "description": "raw logs output"
                                },
                                {
                                    "flag": "-t, --testnet",
                                    "description": "fuji      operate on testnet (alias to fuji)"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        },
                        "start": {
                            "description": "Starts AWM relayer on the specified network (Currently only for local network).",
                            "flags": [
                                {
                                    "flag": "--bin-path",
                                    "description": "string   use the given relayer binary"
                                },
                                {
                                    "flag": "--cluster",
                                    "description": "string    operate on the given cluster"
                                },
                                {
                                    "flag": "--endpoint",
                                    "description": "string   use the given endpoint for network operations"
                                },
                                {
                                    "flag": "-f, --fuji",
                                    "description": "testnet      operate on fuji (alias to testnet"
                                },
                                {
                                    "flag": "-h, --help",
                                    "description": "help for start"
                                },
                                {
                                    "flag": "-l, --local",
                                    "description": "operate on a local network"
                                },
                                {
                                    "flag": "-t, --testnet",
                                    "description": "fuji      operate on testnet (alias to fuji)"
                                },
                                {
                                    "flag": "--version",
                                    "description": "string    version to use (default \"latest-prerelease\")"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        },
                        "stop": {
                            "description": "Stops AWM relayer on the specified network (Currently only for local network, cluster).",
                            "flags": [
                                {
                                    "flag": "--cluster",
                                    "description": "string    operate on the given cluster"
                                },
                                {
                                    "flag": "--endpoint",
                                    "description": "string   use the given endpoint for network operations"
                                },
                                {
                                    "flag": "-f, --fuji",
                                    "description": "testnet      operate on fuji (alias to testnet"
                                },
                                {
                                    "flag": "-h, --help",
                                    "description": "help for stop"
                                },
                                {
                                    "flag": "-l, --local",
                                    "description": "operate on a local network"
                                },
                                {
                                    "flag": "-t, --testnet",
                                    "description": "fuji      operate on testnet (alias to fuji)"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        }
                    }
                },
                "tokenTransferrer": {
                    "description": "The tokenTransfer command suite provides tools to deploy and manage Token Transferrers.",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for tokenTransferrer"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {
                        "deploy": {
                            "description": "Deploys a Token Transferrer into a given Network and Subnets",
                            "flags": [
                                {
                                    "flag": "--c-chain-home",
                                    "description": "set the Transferrer's Home Chain into C-Chain"
                                },
                                {
                                    "flag": "--c-chain-remote",
                                    "description": "set the Transferrer's Remote Chain into C-Chain"
                                },
                                {
                                    "flag": "--cluster",
                                    "description": "string                operate on the given cluster"
                                },
                                {
                                    "flag": "--deploy-erc20-home",
                                    "description": "string      deploy a Transferrer Home for the given Chain's ERC20 Token"
                                },
                                {
                                    "flag": "--deploy-native-home",
                                    "description": "deploy a Transferrer Home for the Chain's Native Token"
                                },
                                {
                                    "flag": "--deploy-native-remote",
                                    "description": "deploy a Transferrer Remote for the Chain's Native Token"
                                },
                                {
                                    "flag": "--devnet",
                                    "description": "operate on a devnet network"
                                },
                                {
                                    "flag": "--endpoint",
                                    "description": "string               use the given endpoint for network operations"
                                },
                                {
                                    "flag": "-f, --fuji",
                                    "description": "testnet                  operate on fuji (alias to testnet"
                                },
                                {
                                    "flag": "-h, --help",
                                    "description": "help for deploy"
                                },
                                {
                                    "flag": "--home-blockchain",
                                    "description": "string        set the Transferrer's Home Chain into the given CLI blockchain"
                                },
                                {
                                    "flag": "--home-genesis-key",
                                    "description": "use genesis allocated key to deploy Transferrer Home"
                                },
                                {
                                    "flag": "--home-key",
                                    "description": "string               CLI stored key to use to deploy Transferrer Home"
                                },
                                {
                                    "flag": "--home-private-key",
                                    "description": "string       private key to use to deploy Transferrer Home"
                                },
                                {
                                    "flag": "--home-rpc",
                                    "description": "string               use the given RPC URL to connect to the home blockchain"
                                },
                                {
                                    "flag": "-l, --local",
                                    "description": "operate on a local network"
                                },
                                {
                                    "flag": "--remote-blockchain",
                                    "description": "string      set the Transferrer's Remote Chain into the given CLI blockchain"
                                },
                                {
                                    "flag": "--remote-genesis-key",
                                    "description": "use genesis allocated key to deploy Transferrer Remote"
                                },
                                {
                                    "flag": "--remote-key",
                                    "description": "string             CLI stored key to use to deploy Transferrer Remote"
                                },
                                {
                                    "flag": "--remote-private-key",
                                    "description": "string     private key to use to deploy Transferrer Remote"
                                },
                                {
                                    "flag": "--remote-rpc",
                                    "description": "string             use the given RPC URL to connect to the remote blockchain"
                                },
                                {
                                    "flag": "--remote-token-decimals",
                                    "description": "uint8   use the given number of token decimals for the Transferrer Remote [defaults to token home's decimals (18 for a new wrapped native home token)]"
                                },
                                {
                                    "flag": "--remove-minter-admin",
                                    "description": "remove the native minter precompile admin found on remote blockchain genesis"
                                },
                                {
                                    "flag": "-t, --testnet",
                                    "description": "fuji                  operate on testnet (alias to fuji)"
                                },
                                {
                                    "flag": "--use-home",
                                    "description": "string               use the given Transferrer's Home Address"
                                },
                                {
                                    "flag": "--version",
                                    "description": "string                tag/branch/commit of Avalanche Interchain Token Transfer (ICTT) to be used (defaults to main branch)"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        }
                    }
                }
            }
        },
        "key": {
            "description": "The key command suite provides a collection of tools for creating and managing\nsigning keys. You can use these keys to deploy Subnets to the Fuji Testnet,\nbut these keys are NOT suitable to use in production environments. DO NOT use\nthese keys on Mainnet.\n\nTo get started, use the key create command.",
            "flags": [
                {
                    "flag": "-h, --help",
                    "description": "help for key"
                },
                {
                    "flag": "--config",
                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                },
                {
                    "flag": "--log-level",
                    "description": "string    log level for the application (default \"ERROR\")"
                },
                {
                    "flag": "--skip-update-check",
                    "description": "skip check for new versions"
                }
            ],
            "subcommands": {
                "create": {
                    "description": "The key create command generates a new private key to use for creating and controlling\ntest Subnets. Keys generated by this command are NOT cryptographically secure enough to\nuse in production environments. DO NOT use these keys on Mainnet.\n\nThe command works by generating a secp256 key and storing it with the provided keyName. You\ncan use this key in other commands by providing this keyName.\n\nIf you'd like to import an existing key instead of generating one from scratch, provide the\n--file flag.",
                    "flags": [
                        {
                            "flag": "--file",
                            "description": "string     import the key from an existing key file"
                        },
                        {
                            "flag": "-f, --force",
                            "description": "overwrite an existing key with the same name"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for create"
                        },
                        {
                            "flag": "--skip-balances",
                            "description": "do not query public network balances for an imported key"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "delete": {
                    "description": "The key delete command deletes an existing signing key.\n\nTo delete a key, provide the keyName. The command prompts for confirmation\nbefore deleting the key. To skip the confirmation, provide the --force flag.",
                    "flags": [
                        {
                            "flag": "-f, --force",
                            "description": "delete the key without confirmation"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for delete"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "export": {
                    "description": "The key export command exports a created signing key. You can use an exported key in other\napplications or import it into another instance of Avalanche-CLI.\n\nBy default, the tool writes the hex encoded key to stdout. If you provide the --output\nflag, the command writes the key to a file of your choosing.",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for export"
                        },
                        {
                            "flag": "-o, --output",
                            "description": "string   write the key to the provided file path"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "list": {
                    "description": "The key list command prints information for all stored signing\nkeys or for the ledger addresses associated to certain indices.",
                    "flags": [
                        {
                            "flag": "-a, --all-networks",
                            "description": "list all network addresses"
                        },
                        {
                            "flag": "--blockchains",
                            "description": "strings   blockchains to show information about (p=p-chain, x=x-chain, c=c-chain, and blockchain names) (default p,x,c)"
                        },
                        {
                            "flag": "-c, --cchain",
                            "description": "list C-Chain addresses (default true)"
                        },
                        {
                            "flag": "--cluster",
                            "description": "string        operate on the given cluster"
                        },
                        {
                            "flag": "--devnet",
                            "description": "operate on a devnet network"
                        },
                        {
                            "flag": "--endpoint",
                            "description": "string       use the given endpoint for network operations"
                        },
                        {
                            "flag": "-f, --fuji",
                            "description": "testnet          operate on fuji (alias to testnet"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for list"
                        },
                        {
                            "flag": "--keys",
                            "description": "strings          list addresses for the given keys"
                        },
                        {
                            "flag": "-g, --ledger",
                            "description": "uints          list ledger addresses for the given indices (default [])"
                        },
                        {
                            "flag": "-l, --local",
                            "description": "operate on a local network"
                        },
                        {
                            "flag": "-m, --mainnet",
                            "description": "operate on mainnet"
                        },
                        {
                            "flag": "--pchain",
                            "description": "list P-Chain addresses (default true)"
                        },
                        {
                            "flag": "--subnets",
                            "description": "strings       subnets to show information about (p=p-chain, x=x-chain, c=c-chain, and blockchain names) (default p,x,c)"
                        },
                        {
                            "flag": "-t, --testnet",
                            "description": "fuji          operate on testnet (alias to fuji)"
                        },
                        {
                            "flag": "--tokens",
                            "description": "strings        provide balance information for the given token contract addresses (Evm only) (default [Native])"
                        },
                        {
                            "flag": "--use-gwei",
                            "description": "use gwei for EVM balances"
                        },
                        {
                            "flag": "-n, --use-nano-avax",
                            "description": "use nano Avax for balances"
                        },
                        {
                            "flag": "--xchain",
                            "description": "list X-Chain addresses (default true)"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "transfer": {
                    "description": "The key transfer command allows to transfer funds between stored keys or ledger addresses.",
                    "flags": [
                        {
                            "flag": "-o, --amount",
                            "description": "float                             amount to send or receive (AVAX or TOKEN units)"
                        },
                        {
                            "flag": "--c-chain-receiver",
                            "description": "receive at C-Chain"
                        },
                        {
                            "flag": "--c-chain-sender",
                            "description": "send from C-Chain"
                        },
                        {
                            "flag": "--cluster",
                            "description": "string                           operate on the given cluster"
                        },
                        {
                            "flag": "-a, --destination-addr",
                            "description": "string                  destination address"
                        },
                        {
                            "flag": "--destination-key",
                            "description": "string                   key associated to a destination address"
                        },
                        {
                            "flag": "--destination-subnet",
                            "description": "string                subnet where the funds will be sent (token transferrer experimental)"
                        },
                        {
                            "flag": "--destination-transferrer-address",
                            "description": "string   token transferrer address at the destination subnet (token transferrer experimental)"
                        },
                        {
                            "flag": "--devnet",
                            "description": "operate on a devnet network"
                        },
                        {
                            "flag": "--endpoint",
                            "description": "string                          use the given endpoint for network operations"
                        },
                        {
                            "flag": "-f, --fuji",
                            "description": "testnet                             operate on fuji (alias to testnet"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for transfer"
                        },
                        {
                            "flag": "-k, --key",
                            "description": "string                               key associated to the sender or receiver address"
                        },
                        {
                            "flag": "-i, --ledger",
                            "description": "uint32                            ledger index associated to the sender or receiver address (default 32768)"
                        },
                        {
                            "flag": "-l, --local",
                            "description": "operate on a local network"
                        },
                        {
                            "flag": "-m, --mainnet",
                            "description": "operate on mainnet"
                        },
                        {
                            "flag": "--origin-subnet",
                            "description": "string                     subnet where the funds belong (token transferrer experimental)"
                        },
                        {
                            "flag": "--origin-transferrer-address",
                            "description": "string        token transferrer address at the origin subnet (token transferrer experimental)"
                        },
                        {
                            "flag": "--p-chain-receiver",
                            "description": "receive at P-Chain"
                        },
                        {
                            "flag": "--p-chain-sender",
                            "description": "send from P-Chain"
                        },
                        {
                            "flag": "--receiver-blockchain",
                            "description": "string               receive at the given CLI blockchain"
                        },
                        {
                            "flag": "--receiver-blockchain-id",
                            "description": "string            receive at the given blockchain ID/Alias"
                        },
                        {
                            "flag": "--sender-blockchain",
                            "description": "string                 send from the given CLI blockchain"
                        },
                        {
                            "flag": "--sender-blockchain-id",
                            "description": "string              send from the given blockchain ID/Alias"
                        },
                        {
                            "flag": "-t, --testnet",
                            "description": "fuji                             operate on testnet (alias to fuji)"
                        },
                        {
                            "flag": "--x-chain-receiver",
                            "description": "receive at X-Chain"
                        },
                        {
                            "flag": "--x-chain-sender",
                            "description": "send from X-Chain"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                }
            }
        },
        "network": {
            "description": "The network command suite provides a collection of tools for managing local Blockchain\ndeployments.\n\nWhen you deploy a Blockchain locally, it runs on a local, multi-node Avalanche network. The\nblockchain deploy command starts this network in the background. This command suite allows you\nto shutdown, restart, and clear that network.\n\nThis network currently supports multiple, concurrently deployed Blockchains.",
            "flags": [
                {
                    "flag": "-h, --help",
                    "description": "help for network"
                },
                {
                    "flag": "--config",
                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                },
                {
                    "flag": "--log-level",
                    "description": "string    log level for the application (default \"ERROR\")"
                },
                {
                    "flag": "--skip-update-check",
                    "description": "skip check for new versions"
                }
            ],
            "subcommands": {
                "clean": {
                    "description": "The network clean command shuts down your local, multi-node network. All deployed Subnets\nshutdown and delete their state. You can restart the network by deploying a new Subnet\nconfiguration.",
                    "flags": [
                        {
                            "flag": "--hard",
                            "description": "Also clean downloaded avalanchego and plugin binaries"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for clean"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "start": {
                    "description": "The network start command starts a local, multi-node Avalanche network on your machine.\n\nBy default, the command loads the default snapshot. If you provide the --snapshot-name\nflag, the network loads that snapshot instead. The command fails if the local network is\nalready running.",
                    "flags": [
                        {
                            "flag": "--avalanchego-path",
                            "description": "string      use this avalanchego binary path"
                        },
                        {
                            "flag": "--avalanchego-version",
                            "description": "string   use this version of avalanchego (ex: v1.17.12) (default \"latest-prerelease\")"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for start"
                        },
                        {
                            "flag": "--num-nodes",
                            "description": "uint32             number of nodes to be created on local network (default 2)"
                        },
                        {
                            "flag": "--relayer-path",
                            "description": "string          use this relayer binary path"
                        },
                        {
                            "flag": "--relayer-version",
                            "description": "string       use this relayer version (default \"latest-prerelease\")"
                        },
                        {
                            "flag": "--snapshot-name",
                            "description": "string         name of snapshot to use to start the network from (default \"default-1654102509\")"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "status": {
                    "description": "The network status command prints whether or not a local Avalanche\nnetwork is running and some basic stats about the network.",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for status"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "stop": {
                    "description": "The network stop command shuts down your local, multi-node network.\n\nAll deployed Subnets shutdown gracefully and save their state. If you provide the\n--snapshot-name flag, the network saves its state under this named snapshot. You can\nreload this snapshot with network start --snapshot-name `snapshotName`. Otherwise, the\nnetwork saves to the default snapshot, overwriting any existing state. You can reload the\ndefault snapshot with network start.",
                    "flags": [
                        {
                            "flag": "--dont-save",
                            "description": "do not save snapshot, just stop the network"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for stop"
                        },
                        {
                            "flag": "--snapshot-name",
                            "description": "string   name of snapshot to use to save network state into (default \"default-1654102509\")"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                }
            }
        },
        "node": {
            "description": "The node command suite provides a collection of tools for creating and maintaining \nvalidators on Avalanche Network.\n\nTo get started, use the node create command wizard to walk through the\nconfiguration to make your node a primary validator on Avalanche public network. You can use the \nrest of the commands to maintain your node and make your node a Subnet Validator.",
            "flags": [
                {
                    "flag": "-h, --help",
                    "description": "help for node"
                },
                {
                    "flag": "--config",
                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                },
                {
                    "flag": "--log-level",
                    "description": "string    log level for the application (default \"ERROR\")"
                },
                {
                    "flag": "--skip-update-check",
                    "description": "skip check for new versions"
                }
            ],
            "subcommands": {
                "addDashboard": {
                    "description": "(ALPHA Warning) This command is currently in experimental mode. \n\nThe node addDashboard command adds custom dashboard to the Grafana monitoring dashboard for the \ncluster.",
                    "flags": [
                        {
                            "flag": "--add-grafana-dashboard",
                            "description": "string   path to additional grafana dashboard json file"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for addDashboard"
                        },
                        {
                            "flag": "--subnet",
                            "description": "string                  subnet that the dasbhoard is intended for (if any)"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "create": {
                    "description": "(ALPHA Warning) This command is currently in experimental mode. \n\nThe node create command sets up a validator on a cloud server of your choice. \nThe validator will be validating the Avalanche Primary Network and Subnet \nof your choice. By default, the command runs an interactive wizard. It \nwalks you through all the steps you need to set up a validator.\nOnce this command is completed, you will have to wait for the validator\nto finish bootstrapping on the primary network before running further\ncommands on it, e.g. validating a Subnet. You can check the bootstrapping\nstatus by running avalanche node status \n\nThe created node will be part of group of validators called `clusterName` \nand users can call node commands with `clusterName` so that the command\nwill apply to all nodes in the cluster",
                    "flags": [
                        {
                            "flag": "--add-grafana-dashboard",
                            "description": "string             path to additional grafana dashboard json file"
                        },
                        {
                            "flag": "--alternative-key-pair-name",
                            "description": "string         key pair name to use if default one generates conflicts"
                        },
                        {
                            "flag": "--authorize-access",
                            "description": "authorize CLI to create cloud resources"
                        },
                        {
                            "flag": "--auto-replace-keypair",
                            "description": "automatically replaces key pair to access node if previous key pair is not found"
                        },
                        {
                            "flag": "--avalanchego-version-from-subnet",
                            "description": "string   install latest avalanchego version, that is compatible with the given subnet, on node/s"
                        },
                        {
                            "flag": "--aws",
                            "description": "create node/s in AWS cloud"
                        },
                        {
                            "flag": "--aws-profile",
                            "description": "string                       aws profile to use (default \"default\")"
                        },
                        {
                            "flag": "--aws-volume-iops",
                            "description": "int                      AWS iops (for gp3, io1, and io2 volume types only) (default 3000)"
                        },
                        {
                            "flag": "--aws-volume-size",
                            "description": "int                      AWS volume size in GB (default 1000)"
                        },
                        {
                            "flag": "--aws-volume-throughput",
                            "description": "int                AWS throughput in MiB/s (for gp3 volume type only) (default 125)"
                        },
                        {
                            "flag": "--aws-volume-type",
                            "description": "string                   AWS volume type (default \"gp3\")"
                        },
                        {
                            "flag": "--bootstrap-ids",
                            "description": "stringArray                nodeIDs of bootstrap nodes"
                        },
                        {
                            "flag": "--bootstrap-ips",
                            "description": "stringArray                IP:port pairs of bootstrap nodes"
                        },
                        {
                            "flag": "--cluster",
                            "description": "string                           operate on the given cluster"
                        },
                        {
                            "flag": "--custom-avalanchego-version",
                            "description": "string        install given avalanchego version on node/s"
                        },
                        {
                            "flag": "--devnet",
                            "description": "operate on a devnet network"
                        },
                        {
                            "flag": "--enable-monitoring",
                            "description": "set up Prometheus monitoring for created nodes. This option creates a separate monitoring cloud instance and incures additional cost"
                        },
                        {
                            "flag": "--endpoint",
                            "description": "string                          use the given endpoint for network operations"
                        },
                        {
                            "flag": "-f, --fuji",
                            "description": "testnet                             operate on fuji (alias to testnet"
                        },
                        {
                            "flag": "--gcp",
                            "description": "create node/s in GCP cloud"
                        },
                        {
                            "flag": "--gcp-credentials",
                            "description": "string                   use given GCP credentials"
                        },
                        {
                            "flag": "--gcp-project",
                            "description": "string                       use given GCP project"
                        },
                        {
                            "flag": "--genesis",
                            "description": "string                           path to genesis file"
                        },
                        {
                            "flag": "--grafana-pkg",
                            "description": "string                       use grafana pkg instead of apt repo(by default), for example https://dl.grafana.com/oss/release/grafana_10.4.1_amd64.deb"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for create"
                        },
                        {
                            "flag": "--latest-avalanchego-pre-release-version",
                            "description": "install latest avalanchego pre-release version on node/s"
                        },
                        {
                            "flag": "--latest-avalanchego-version",
                            "description": "install latest avalanchego release version on node/s"
                        },
                        {
                            "flag": "-m, --mainnet",
                            "description": "operate on mainnet"
                        },
                        {
                            "flag": "--node-type",
                            "description": "string                         cloud instance type. Use 'default' to use recommended default instance type"
                        },
                        {
                            "flag": "--num-apis",
                            "description": "ints                            number of API nodes(nodes without stake) to create in the new Devnet"
                        },
                        {
                            "flag": "--num-validators",
                            "description": "ints                      number of nodes to create per region(s). Use comma to separate multiple numbers for each region in the same order as --region flag"
                        },
                        {
                            "flag": "--partial-sync",
                            "description": "primary network partial sync (default true)"
                        },
                        {
                            "flag": "--public-http-port",
                            "description": "allow public access to avalanchego HTTP port"
                        },
                        {
                            "flag": "--region",
                            "description": "strings                           create node(s) in given region(s). Use comma to separate multiple regions"
                        },
                        {
                            "flag": "--ssh-agent-identity",
                            "description": "string                use given ssh identity(only for ssh agent). If not set, default will be used"
                        },
                        {
                            "flag": "-t, --testnet",
                            "description": "fuji                             operate on testnet (alias to fuji)"
                        },
                        {
                            "flag": "--upgrade",
                            "description": "string                           path to upgrade file"
                        },
                        {
                            "flag": "--use-ssh-agent",
                            "description": "use ssh agent(ex: Yubikey) for ssh auth"
                        },
                        {
                            "flag": "--use-static-ip",
                            "description": "attach static Public IP on cloud servers (default true)"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "destroy": {
                    "description": "(ALPHA Warning) This command is currently in experimental mode.\n\nThe node destroy command terminates all running nodes in cloud server and deletes all storage disks.\n\nIf there is a static IP address attached, it will be released.",
                    "flags": [
                        {
                            "flag": "--all",
                            "description": "destroy all existing clusters created by Avalanche CLI"
                        },
                        {
                            "flag": "--authorize-access",
                            "description": "authorize CLI to release cloud resources"
                        },
                        {
                            "flag": "-y, --authorize-all",
                            "description": "authorize all CLI requests"
                        },
                        {
                            "flag": "--authorize-remove",
                            "description": "authorize CLI to remove all local files related to cloud nodes"
                        },
                        {
                            "flag": "--aws-profile",
                            "description": "string   aws profile to use (default \"default\")"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for destroy"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "devnet": {
                    "description": "(ALPHA Warning) This command is currently in experimental mode.\n\nThe node devnet command suite provides a collection of commands related to devnets.\nYou can check the updated status by calling avalanche node status `clusterName`",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for devnet"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {
                        "deploy": {
                            "description": "(ALPHA Warning) This command is currently in experimental mode.\n\nThe node devnet deploy command deploys a subnet into a devnet cluster, creating subnet and blockchain txs for it.\nIt saves the deploy info both locally and remotely.",
                            "flags": [
                                {
                                    "flag": "-h, --help",
                                    "description": "help for deploy"
                                },
                                {
                                    "flag": "--no-checks",
                                    "description": "do not check for healthy status or rpc compatibility of nodes against subnet"
                                },
                                {
                                    "flag": "--subnet-aliases",
                                    "description": "strings   additional subnet aliases to be used for RPC calls in addition to subnet blockchain name"
                                },
                                {
                                    "flag": "--subnet-only",
                                    "description": "only create a subnet"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        },
                        "wiz": {
                            "description": "(ALPHA Warning) This command is currently in experimental mode.\n\nThe node wiz command creates a devnet and deploys, sync and validate a subnet into it. It creates the subnet if so needed.",
                            "flags": [
                                {
                                    "flag": "--add-grafana-dashboard",
                                    "description": "string                        path to additional grafana dashboard json file"
                                },
                                {
                                    "flag": "--alternative-key-pair-name",
                                    "description": "string                    key pair name to use if default one generates conflicts"
                                },
                                {
                                    "flag": "--authorize-access",
                                    "description": "authorize CLI to create cloud resources"
                                },
                                {
                                    "flag": "--auto-replace-keypair",
                                    "description": "automatically replaces key pair to access node if previous key pair is not found"
                                },
                                {
                                    "flag": "--aws",
                                    "description": "create node/s in AWS cloud"
                                },
                                {
                                    "flag": "--aws-profile",
                                    "description": "string                                  aws profile to use (default \"default\")"
                                },
                                {
                                    "flag": "--aws-volume-iops",
                                    "description": "int                                 AWS iops (for gp3, io1, and io2 volume types only) (default 3000)"
                                },
                                {
                                    "flag": "--aws-volume-size",
                                    "description": "int                                 AWS volume size in GB (default 1000)"
                                },
                                {
                                    "flag": "--aws-volume-throughput",
                                    "description": "int                           AWS throughput in MiB/s (for gp3 volume type only) (default 125)"
                                },
                                {
                                    "flag": "--aws-volume-type",
                                    "description": "string                              AWS volume type (default \"gp3\")"
                                },
                                {
                                    "flag": "--chain-config",
                                    "description": "string                                 path to the chain configuration for subnet"
                                },
                                {
                                    "flag": "--custom-avalanchego-version",
                                    "description": "string                   install given avalanchego version on node/s"
                                },
                                {
                                    "flag": "--custom-subnet",
                                    "description": "use a custom VM as the subnet virtual machine"
                                },
                                {
                                    "flag": "--custom-vm-branch",
                                    "description": "string                             custom vm branch or commit"
                                },
                                {
                                    "flag": "--custom-vm-build-script",
                                    "description": "string                       custom vm build-script"
                                },
                                {
                                    "flag": "--custom-vm-repo-url",
                                    "description": "string                           custom vm repository url"
                                },
                                {
                                    "flag": "--default-validator-params",
                                    "description": "use default weight/start/duration params for subnet validator"
                                },
                                {
                                    "flag": "--deploy-icm-messenger",
                                    "description": "deploy Interchain Messenger (default true)"
                                },
                                {
                                    "flag": "--deploy-icm-registry",
                                    "description": "deploy Interchain Registry (default true)"
                                },
                                {
                                    "flag": "--deploy-teleporter-messenger",
                                    "description": "deploy Interchain Messenger (default true)"
                                },
                                {
                                    "flag": "--deploy-teleporter-registry",
                                    "description": "deploy Interchain Registry (default true)"
                                },
                                {
                                    "flag": "--enable-monitoring",
                                    "description": "set up Prometheus monitoring for created nodes. Please note that this option creates a separate monitoring instance and incures additional cost"
                                },
                                {
                                    "flag": "--evm-chain-id",
                                    "description": "uint                                   chain ID to use with Subnet-EVM"
                                },
                                {
                                    "flag": "--evm-defaults",
                                    "description": "use default production settings with Subnet-EVM"
                                },
                                {
                                    "flag": "--evm-production-defaults",
                                    "description": "use default production settings for your blockchain"
                                },
                                {
                                    "flag": "--evm-subnet",
                                    "description": "use Subnet-EVM as the subnet virtual machine"
                                },
                                {
                                    "flag": "--evm-test-defaults",
                                    "description": "use default test settings for your blockchain"
                                },
                                {
                                    "flag": "--evm-token",
                                    "description": "string                                    token name to use with Subnet-EVM"
                                },
                                {
                                    "flag": "--evm-version",
                                    "description": "string                                  version of Subnet-EVM to use"
                                },
                                {
                                    "flag": "--force-subnet-create",
                                    "description": "overwrite the existing subnet configuration if one exists"
                                },
                                {
                                    "flag": "--gcp",
                                    "description": "create node/s in GCP cloud"
                                },
                                {
                                    "flag": "--gcp-credentials",
                                    "description": "string                              use given GCP credentials"
                                },
                                {
                                    "flag": "--gcp-project",
                                    "description": "string                                  use given GCP project"
                                },
                                {
                                    "flag": "--grafana-pkg",
                                    "description": "string                                  use grafana pkg instead of apt repo(by default), for example https://dl.grafana.com/oss/release/grafana_10.4.1_amd64.deb"
                                },
                                {
                                    "flag": "-h, --help",
                                    "description": "help for wiz"
                                },
                                {
                                    "flag": "--icm",
                                    "description": "generate an icm-ready vm"
                                },
                                {
                                    "flag": "--icm-messenger-contract-address-path",
                                    "description": "string          path to an icm messenger contract address file"
                                },
                                {
                                    "flag": "--icm-messenger-deployer-address-path",
                                    "description": "string          path to an icm messenger deployer address file"
                                },
                                {
                                    "flag": "--icm-messenger-deployer-tx-path",
                                    "description": "string               path to an icm messenger deployer tx file"
                                },
                                {
                                    "flag": "--icm-registry-bytecode-path",
                                    "description": "string                   path to an icm registry bytecode file"
                                },
                                {
                                    "flag": "--icm-version",
                                    "description": "string                                  icm version to deploy (default \"latest\")"
                                },
                                {
                                    "flag": "--latest-avalanchego-pre-release-version",
                                    "description": "install latest avalanchego pre-release version on node/s"
                                },
                                {
                                    "flag": "--latest-avalanchego-version",
                                    "description": "install latest avalanchego release version on node/s"
                                },
                                {
                                    "flag": "--latest-evm-version",
                                    "description": "use latest Subnet-EVM released version"
                                },
                                {
                                    "flag": "--latest-pre-released-evm-version",
                                    "description": "use latest Subnet-EVM pre-released version"
                                },
                                {
                                    "flag": "--node-config",
                                    "description": "string                                  path to avalanchego node configuration for subnet"
                                },
                                {
                                    "flag": "--node-type",
                                    "description": "string                                    cloud instance type. Use 'default' to use recommended default instance type"
                                },
                                {
                                    "flag": "--num-apis",
                                    "description": "ints                                       number of API nodes(nodes without stake) to create in the new Devnet"
                                },
                                {
                                    "flag": "--num-validators",
                                    "description": "ints                                 number of nodes to create per region(s). Use comma to separate multiple numbers for each region in the same order as --region flag"
                                },
                                {
                                    "flag": "--public-http-port",
                                    "description": "allow public access to avalanchego HTTP port"
                                },
                                {
                                    "flag": "--region",
                                    "description": "strings                                      create node/s in given region(s). Use comma to separate multiple regions"
                                },
                                {
                                    "flag": "--relayer",
                                    "description": "run AWM relayer when deploying the vm"
                                },
                                {
                                    "flag": "--ssh-agent-identity",
                                    "description": "string                           use given ssh identity(only for ssh agent). If not set, default will be used."
                                },
                                {
                                    "flag": "--subnet-aliases",
                                    "description": "strings                              additional subnet aliases to be used for RPC calls in addition to subnet blockchain name"
                                },
                                {
                                    "flag": "--subnet-config",
                                    "description": "string                                path to the subnet configuration for subnet"
                                },
                                {
                                    "flag": "--subnet-genesis",
                                    "description": "string                               file path of the subnet genesis"
                                },
                                {
                                    "flag": "--teleporter",
                                    "description": "generate an icm-ready vm"
                                },
                                {
                                    "flag": "--teleporter-messenger-contract-address-path",
                                    "description": "string   path to an icm messenger contract address file"
                                },
                                {
                                    "flag": "--teleporter-messenger-deployer-address-path",
                                    "description": "string   path to an icm messenger deployer address file"
                                },
                                {
                                    "flag": "--teleporter-messenger-deployer-tx-path",
                                    "description": "string        path to an icm messenger deployer tx file"
                                },
                                {
                                    "flag": "--teleporter-registry-bytecode-path",
                                    "description": "string            path to an icm registry bytecode file"
                                },
                                {
                                    "flag": "--teleporter-version",
                                    "description": "string                           icm version to deploy (default \"latest\")"
                                },
                                {
                                    "flag": "--use-ssh-agent",
                                    "description": "use ssh agent for ssh"
                                },
                                {
                                    "flag": "--use-static-ip",
                                    "description": "attach static Public IP on cloud servers (default true)"
                                },
                                {
                                    "flag": "--validators",
                                    "description": "strings                                  deploy subnet into given comma separated list of validators. defaults to all cluster nodes"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        }
                    }
                },
                "export": {
                    "description": "(ALPHA Warning) This command is currently in experimental mode.\n\nThe node export command exports cluster configuration and its nodes config to a text file.\n\nIf no file is specified, the configuration is printed to the stdout.\n\nUse --include-secrets to include keys in the export. In this case please keep the file secure as it contains sensitive information.\n\nExported cluster configuration without secrets can be imported by another user using node import command.",
                    "flags": [
                        {
                            "flag": "--file",
                            "description": "string       specify the file to export the cluster configuration to"
                        },
                        {
                            "flag": "--force",
                            "description": "overwrite the file if it exists"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for export"
                        },
                        {
                            "flag": "--include-secrets",
                            "description": "include keys in the export"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "import": {
                    "description": "(ALPHA Warning) This command is currently in experimental mode.\n\nThe node import command imports cluster configuration and its nodes configuration from a text file\ncreated from the node export command.\n\nPrior to calling this command, call node whitelist command to have your SSH public key and IP whitelisted by\nthe cluster owner. This will enable you to use avalanche-cli commands to manage the imported cluster.\n\nPlease note, that this imported cluster will be considered as EXTERNAL by avalanche-cli, so some commands\naffecting cloud nodes like node create or node destroy will be not applicable to it.",
                    "flags": [
                        {
                            "flag": "--file",
                            "description": "string   specify the file to export the cluster configuration to"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for import"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "list": {
                    "description": "(ALPHA Warning) This command is currently in experimental mode.\n\nThe node list command lists all clusters together with their nodes.",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for list"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "loadtest": {
                    "description": "(ALPHA Warning) This command is currently in experimental mode. \n\nThe node loadtest command suite starts and stops a load test for an existing devnet cluster.",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for loadtest"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {
                        "start": {
                            "description": "(ALPHA Warning) This command is currently in experimental mode. \n\nThe node loadtest command starts load testing for an existing devnet cluster. If the cluster does \nnot have an existing load test host, the command creates a separate cloud server and builds the load \ntest binary based on the provided load test Git Repo URL and load test binary build command. \n\nThe command will then run the load test binary based on the provided load test run command.",
                            "flags": [
                                {
                                    "flag": "--authorize-access",
                                    "description": "authorize CLI to create cloud resources"
                                },
                                {
                                    "flag": "--aws",
                                    "description": "create loadtest node in AWS cloud"
                                },
                                {
                                    "flag": "--aws-profile",
                                    "description": "string           aws profile to use (default \"default\")"
                                },
                                {
                                    "flag": "--gcp",
                                    "description": "create loadtest in GCP cloud"
                                },
                                {
                                    "flag": "-h, --help",
                                    "description": "help for start"
                                },
                                {
                                    "flag": "--load-test-branch",
                                    "description": "string      load test branch or commit"
                                },
                                {
                                    "flag": "--load-test-build-cmd",
                                    "description": "string   command to build load test binary"
                                },
                                {
                                    "flag": "--load-test-cmd",
                                    "description": "string         command to run load test"
                                },
                                {
                                    "flag": "--load-test-repo",
                                    "description": "string        load test repo url to use"
                                },
                                {
                                    "flag": "--node-type",
                                    "description": "string             cloud instance type for loadtest script"
                                },
                                {
                                    "flag": "--region",
                                    "description": "string                create load test node in a given region"
                                },
                                {
                                    "flag": "--ssh-agent-identity",
                                    "description": "string    use given ssh identity(only for ssh agent). If not set, default will be used"
                                },
                                {
                                    "flag": "--use-ssh-agent",
                                    "description": "use ssh agent(ex: Yubikey) for ssh auth"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        },
                        "stop": {
                            "description": "(ALPHA Warning) This command is currently in experimental mode. \n\nThe node loadtest stop command stops load testing for an existing devnet cluster and terminates the \nseparate cloud server created to host the load test.",
                            "flags": [
                                {
                                    "flag": "-h, --help",
                                    "description": "help for stop"
                                },
                                {
                                    "flag": "--load-test",
                                    "description": "strings   stop specified load test node(s). Use comma to separate multiple load test instance names"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        }
                    }
                },
                "local": {
                    "description": "(ALPHA Warning) This command is currently in experimental mode.\n\nThe node local command suite provides a collection of commands related to local nodes",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for local"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {
                        "destroy": {
                            "description": "Cleanup local node.",
                            "flags": [
                                {
                                    "flag": "-h, --help",
                                    "description": "help for destroy"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        },
                        "start": {
                            "description": "(ALPHA Warning) This command is currently in experimental mode. \n\nThe node local start command sets up a validator on a local server. \nThe validator will be validating the Avalanche Primary Network and Subnet \nof your choice. By default, the command runs an interactive wizard. It \nwalks you through all the steps you need to set up a validator.\nOnce this command is completed, you will have to wait for the validator\nto finish bootstrapping on the primary network before running further\ncommands on it, e.g. validating a Subnet. You can check the bootstrapping\nstatus by running avalanche node status local",
                            "flags": [
                                {
                                    "flag": "--avalanchego-path",
                                    "description": "string                  use this avalanchego binary path"
                                },
                                {
                                    "flag": "--bootstrap-id",
                                    "description": "stringArray                 nodeIDs of bootstrap nodes"
                                },
                                {
                                    "flag": "--bootstrap-ip",
                                    "description": "stringArray                 IP:port pairs of bootstrap nodes"
                                },
                                {
                                    "flag": "--cluster",
                                    "description": "string                           operate on the given cluster"
                                },
                                {
                                    "flag": "--custom-avalanchego-version",
                                    "description": "string        install given avalanchego version on node/s"
                                },
                                {
                                    "flag": "--devnet",
                                    "description": "operate on a devnet network"
                                },
                                {
                                    "flag": "--endpoint",
                                    "description": "string                          use the given endpoint for network operations"
                                },
                                {
                                    "flag": "-f, --fuji",
                                    "description": "testnet                             operate on fuji (alias to testnet"
                                },
                                {
                                    "flag": "--genesis",
                                    "description": "string                           path to genesis file"
                                },
                                {
                                    "flag": "-h, --help",
                                    "description": "help for start"
                                },
                                {
                                    "flag": "--latest-avalanchego-pre-release-version",
                                    "description": "install latest avalanchego pre-release version on node/s (default true)"
                                },
                                {
                                    "flag": "--latest-avalanchego-version",
                                    "description": "install latest avalanchego release version on node/s"
                                },
                                {
                                    "flag": "-l, --local",
                                    "description": "operate on a local network"
                                },
                                {
                                    "flag": "-m, --mainnet",
                                    "description": "operate on mainnet"
                                },
                                {
                                    "flag": "--node-config",
                                    "description": "string                       path to common avalanchego config settings for all nodes"
                                },
                                {
                                    "flag": "--num-nodes",
                                    "description": "uint32                         number of nodes to start (default 1)"
                                },
                                {
                                    "flag": "--partial-sync",
                                    "description": "primary network partial sync (default true)"
                                },
                                {
                                    "flag": "--staking-cert-key-path",
                                    "description": "string             path to provided staking cert key for node"
                                },
                                {
                                    "flag": "--staking-signer-key-path",
                                    "description": "string           path to provided staking signer key for node"
                                },
                                {
                                    "flag": "--staking-tls-key-path",
                                    "description": "string              path to provided staking tls key for node"
                                },
                                {
                                    "flag": "-t, --testnet",
                                    "description": "fuji                             operate on testnet (alias to fuji)"
                                },
                                {
                                    "flag": "--upgrade",
                                    "description": "string                           path to upgrade file"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        },
                        "status": {
                            "description": "Get status of local node.",
                            "flags": [
                                {
                                    "flag": "--blockchain",
                                    "description": "string   specify the blockchain the node is syncing with"
                                },
                                {
                                    "flag": "-h, --help",
                                    "description": "help for status"
                                },
                                {
                                    "flag": "--subnet",
                                    "description": "string       specify the blockchain the node is syncing with"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        },
                        "stop": {
                            "description": "Stop local node.",
                            "flags": [
                                {
                                    "flag": "-h, --help",
                                    "description": "help for stop"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        },
                        "track": {
                            "description": "(ALPHA Warning) make the local node at the cluster to track given blockchain",
                            "flags": [
                                {
                                    "flag": "--avalanchego-path",
                                    "description": "string                  use this avalanchego binary path"
                                },
                                {
                                    "flag": "--custom-avalanchego-version",
                                    "description": "string        install given avalanchego version on node/s"
                                },
                                {
                                    "flag": "-h, --help",
                                    "description": "help for track"
                                },
                                {
                                    "flag": "--latest-avalanchego-pre-release-version",
                                    "description": "install latest avalanchego pre-release version on node/s (default true)"
                                },
                                {
                                    "flag": "--latest-avalanchego-version",
                                    "description": "install latest avalanchego release version on node/s"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        }
                    }
                },
                "refresh-ips": {
                    "description": "(ALPHA Warning) This command is currently in experimental mode.\n\nThe node refresh-ips command obtains the current IP for all nodes with dynamic IPs in the cluster,\nand updates the local node information used by CLI commands.",
                    "flags": [
                        {
                            "flag": "--aws-profile",
                            "description": "string   aws profile to use (default \"default\")"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for refresh-ips"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "resize": {
                    "description": "(ALPHA Warning) This command is currently in experimental mode.\n\nThe node resize command can change the amount of CPU, memory and disk space available for the cluster nodes.",
                    "flags": [
                        {
                            "flag": "--aws-profile",
                            "description": "string   aws profile to use (default \"default\")"
                        },
                        {
                            "flag": "--disk-size",
                            "description": "string     Disk size to resize in Gb (e.g. 1000Gb)"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for resize"
                        },
                        {
                            "flag": "--node-type",
                            "description": "string     Node type to resize (e.g. t3.2xlarge)"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "scp": {
                    "description": "(ALPHA Warning) This command is currently in experimental mode.\n\nThe node scp command securely copies files to and from nodes. Remote source or destionation can be specified using the following format:\n[clusterName|nodeID|instanceID|IP]:/path/to/file. Regular expressions are supported for the source files like /tmp/*.txt.\nFile transfer to the nodes are parallelized. IF source or destination is cluster, the other should be a local file path. \nIf both destinations are remote, they must be nodes for the same cluster and not clusters themselves.\nFor example:\n$ avalanche node scp [cluster1|node1]:/tmp/file.txt /tmp/file.txt\n$ avalanche node scp /tmp/file.txt [cluster1|NodeID-XXXX]:/tmp/file.txt\n$ avalanche node scp node1:/tmp/file.txt NodeID-XXXX:/tmp/file.txt",
                    "flags": [
                        {
                            "flag": "--compress",
                            "description": "use compression for ssh"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for scp"
                        },
                        {
                            "flag": "--recursive",
                            "description": "copy directories recursively"
                        },
                        {
                            "flag": "--with-loadtest",
                            "description": "include loadtest node for scp cluster operations"
                        },
                        {
                            "flag": "--with-monitor",
                            "description": "include monitoring node for scp cluster operations"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "ssh": {
                    "description": "(ALPHA Warning) This command is currently in experimental mode.\n\nThe node ssh command execute a given command [cmd] using ssh on all nodes in the cluster if ClusterName is given.\nIf no command is given, just prints the ssh command to be used to connect to each node in the cluster.\nFor provided NodeID or InstanceID or IP, the command [cmd] will be executed on that node.\nIf no [cmd] is provided for the node, it will open ssh shell there.",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for ssh"
                        },
                        {
                            "flag": "--parallel",
                            "description": "run ssh command on all nodes in parallel"
                        },
                        {
                            "flag": "--with-loadtest",
                            "description": "include loadtest node for ssh cluster operations"
                        },
                        {
                            "flag": "--with-monitor",
                            "description": "include monitoring node for ssh cluster operations"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "status": {
                    "description": "(ALPHA Warning) This command is currently in experimental mode.\n\nThe node status command gets the bootstrap status of all nodes in a cluster with the Primary Network. \nIf no cluster is given, defaults to node list behaviour.\n\nTo get the bootstrap status of a node with a Blockchain, use --blockchain flag",
                    "flags": [
                        {
                            "flag": "--blockchain",
                            "description": "string   specify the blockchain the node is syncing with"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for status"
                        },
                        {
                            "flag": "--subnet",
                            "description": "string       specify the blockchain the node is syncing with"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "sync": {
                    "description": "(ALPHA Warning) This command is currently in experimental mode.\n\nThe node sync command enables all nodes in a cluster to be bootstrapped to a Blockchain.\nYou can check the blockchain bootstrap status by calling avalanche node status `clusterName` --blockchain `blockchainName`",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for sync"
                        },
                        {
                            "flag": "--no-checks",
                            "description": "do not check for bootstrapped/healthy status or rpc compatibility of nodes against subnet"
                        },
                        {
                            "flag": "--subnet-aliases",
                            "description": "strings   subnet alias to be used for RPC calls. defaults to subnet blockchain ID"
                        },
                        {
                            "flag": "--validators",
                            "description": "strings       sync subnet into given comma separated list of validators. defaults to all cluster nodes"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "update": {
                    "description": "(ALPHA Warning) This command is currently in experimental mode.\n\nThe node update command suite provides a collection of commands for nodes to update\ntheir avalanchego or VM config.\n\nYou can check the status after update by calling avalanche node status",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for update"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {
                        "subnet": {
                            "description": "(ALPHA Warning) This command is currently in experimental mode.\n\nThe node update subnet command updates all nodes in a cluster with latest Subnet configuration and VM for custom VM.\nYou can check the updated subnet bootstrap status by calling avalanche node status `clusterName` --subnet `subnetName`",
                            "flags": [
                                {
                                    "flag": "-h, --help",
                                    "description": "help for subnet"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        }
                    }
                },
                "upgrade": {
                    "description": "(ALPHA Warning) This command is currently in experimental mode.\n\nThe node update command suite provides a collection of commands for nodes to update\ntheir avalanchego or VM version.\n\nYou can check the status after upgrade by calling avalanche node status",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for upgrade"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "validate": {
                    "description": "(ALPHA Warning) This command is currently in experimental mode.\n\nThe node validate command suite provides a collection of commands for nodes to join\nthe Primary Network and Subnets as validators.\nIf any of the commands is run before the nodes are bootstrapped on the Primary Network, the command \nwill fail. You can check the bootstrap status by calling avalanche node status `clusterName`",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for validate"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {
                        "primary": {
                            "description": "(ALPHA Warning) This command is currently in experimental mode.\n\nThe node validate primary command enables all nodes in a cluster to be validators of Primary\nNetwork.",
                            "flags": [
                                {
                                    "flag": "-e, --ewoq",
                                    "description": "use ewoq key [fuji/devnet only]"
                                },
                                {
                                    "flag": "-h, --help",
                                    "description": "help for primary"
                                },
                                {
                                    "flag": "-k, --key",
                                    "description": "string                select the key to use [fuji only]"
                                },
                                {
                                    "flag": "-g, --ledger",
                                    "description": "use ledger instead of key (always true on mainnet, defaults to false on fuji/devnet)"
                                },
                                {
                                    "flag": "--ledger-addrs",
                                    "description": "strings      use the given ledger addresses"
                                },
                                {
                                    "flag": "--stake-amount",
                                    "description": "uint         how many AVAX to stake in the validator"
                                },
                                {
                                    "flag": "--staking-period",
                                    "description": "duration   how long validator validates for after start time"
                                },
                                {
                                    "flag": "--start-time",
                                    "description": "string         UTC start time when this validator starts validating, in 'YYYY-MM-DD HH:MM:SS' format"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        },
                        "subnet": {
                            "description": "(ALPHA Warning) This command is currently in experimental mode.\n\nThe node validate subnet command enables all nodes in a cluster to be validators of a Subnet.\nIf the command is run before the nodes are Primary Network validators, the command will first\nmake the nodes Primary Network validators before making them Subnet validators. \nIf The command is run before the nodes are bootstrapped on the Primary Network, the command will fail. \nYou can check the bootstrap status by calling avalanche node status `clusterName`\nIf The command is run before the nodes are synced to the subnet, the command will fail.\nYou can check the subnet sync status by calling avalanche node status `clusterName` --subnet `subnetName`",
                            "flags": [
                                {
                                    "flag": "--default-validator-params",
                                    "description": "use default weight/start/duration params for subnet validator"
                                },
                                {
                                    "flag": "-e, --ewoq",
                                    "description": "use ewoq key [fuji/devnet only]"
                                },
                                {
                                    "flag": "-h, --help",
                                    "description": "help for subnet"
                                },
                                {
                                    "flag": "-k, --key",
                                    "description": "string                 select the key to use [fuji/devnet only]"
                                },
                                {
                                    "flag": "-g, --ledger",
                                    "description": "use ledger instead of key (always true on mainnet, defaults to false on fuji/devnet)"
                                },
                                {
                                    "flag": "--ledger-addrs",
                                    "description": "strings       use the given ledger addresses"
                                },
                                {
                                    "flag": "--no-checks",
                                    "description": "do not check for bootstrapped status or healthy status"
                                },
                                {
                                    "flag": "--no-validation-checks",
                                    "description": "do not check if subnet is already synced or validated (default true)"
                                },
                                {
                                    "flag": "--stake-amount",
                                    "description": "uint          how many AVAX to stake in the validator"
                                },
                                {
                                    "flag": "--staking-period",
                                    "description": "duration    how long validator validates for after start time"
                                },
                                {
                                    "flag": "--start-time",
                                    "description": "string          UTC start time when this validator starts validating, in 'YYYY-MM-DD HH:MM:SS' format"
                                },
                                {
                                    "flag": "--validators",
                                    "description": "strings         validate subnet for the given comma separated list of validators. defaults to all cluster nodes"
                                },
                                {
                                    "flag": "--config",
                                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                                },
                                {
                                    "flag": "--log-level",
                                    "description": "string    log level for the application (default \"ERROR\")"
                                },
                                {
                                    "flag": "--skip-update-check",
                                    "description": "skip check for new versions"
                                }
                            ],
                            "subcommands": {}
                        }
                    }
                },
                "whitelist": {
                    "description": "(ALPHA Warning) The whitelist command suite provides a collection of tools for granting access to the cluster.\n\n\tCommand adds IP if --ip params provided to cloud security access rules allowing it to access all nodes in the cluster via ssh or http.\n\tIt also command adds SSH public key to all nodes in the cluster if --ssh params is there.\n\tIf no params provided it detects current user IP automaticaly and whitelists it",
                    "flags": [
                        {
                            "flag": "-y, --current-ip",
                            "description": "whitelist current host ip"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for whitelist"
                        },
                        {
                            "flag": "--ip",
                            "description": "string    ip address to whitelist"
                        },
                        {
                            "flag": "--ssh",
                            "description": "string   ssh public key to whitelist"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                }
            }
        },
        "primary": {
            "description": "The primary command suite provides a collection of tools for interacting with the\nPrimary Network",
            "flags": [
                {
                    "flag": "-h, --help",
                    "description": "help for primary"
                },
                {
                    "flag": "--config",
                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                },
                {
                    "flag": "--log-level",
                    "description": "string    log level for the application (default \"ERROR\")"
                },
                {
                    "flag": "--skip-update-check",
                    "description": "skip check for new versions"
                }
            ],
            "subcommands": {
                "addValidator": {
                    "description": "The primary addValidator command adds a node as a validator \nin the Primary Network",
                    "flags": [
                        {
                            "flag": "--cluster",
                            "description": "string               operate on the given cluster"
                        },
                        {
                            "flag": "--delegation-fee",
                            "description": "uint32        set the delegation fee (20 000 is equivalent to 2%)"
                        },
                        {
                            "flag": "--devnet",
                            "description": "operate on a devnet network"
                        },
                        {
                            "flag": "--endpoint",
                            "description": "string              use the given endpoint for network operations"
                        },
                        {
                            "flag": "-f, --fuji",
                            "description": "testnet                 operate on fuji (alias to testnet"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for addValidator"
                        },
                        {
                            "flag": "-k, --key",
                            "description": "string                   select the key to use [fuji only]"
                        },
                        {
                            "flag": "-g, --ledger",
                            "description": "use ledger instead of key (always true on mainnet, defaults to false on fuji)"
                        },
                        {
                            "flag": "--ledger-addrs",
                            "description": "strings         use the given ledger addresses"
                        },
                        {
                            "flag": "-m, --mainnet",
                            "description": "operate on mainnet"
                        },
                        {
                            "flag": "--nodeID",
                            "description": "string                set the NodeID of the validator to add"
                        },
                        {
                            "flag": "--proof-of-possession",
                            "description": "string   set the BLS proof of possession of the validator to add"
                        },
                        {
                            "flag": "--public-key",
                            "description": "string            set the BLS public key of the validator to add"
                        },
                        {
                            "flag": "--staking-period",
                            "description": "duration      how long this validator will be staking"
                        },
                        {
                            "flag": "--start-time",
                            "description": "string            UTC start time when this validator starts validating, in 'YYYY-MM-DD HH:MM:SS' format"
                        },
                        {
                            "flag": "-t, --testnet",
                            "description": "fuji                 operate on testnet (alias to fuji)"
                        },
                        {
                            "flag": "--weight",
                            "description": "uint                  set the staking weight of the validator to add"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "describe": {
                    "description": "The subnet describe command prints details of the primary network configuration to the console.",
                    "flags": [
                        {
                            "flag": "--cluster",
                            "description": "string   operate on the given cluster"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for describe"
                        },
                        {
                            "flag": "-l, --local",
                            "description": "operate on a local network"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                }
            }
        },
        "teleporter": {
            "description": "The messenger command suite provides a collection of tools for interacting\nwith ICM messenger contracts.",
            "flags": [
                {
                    "flag": "-h, --help",
                    "description": "help for teleporter"
                },
                {
                    "flag": "--config",
                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                },
                {
                    "flag": "--log-level",
                    "description": "string    log level for the application (default \"ERROR\")"
                },
                {
                    "flag": "--skip-update-check",
                    "description": "skip check for new versions"
                }
            ],
            "subcommands": {
                "deploy": {
                    "description": "Deploys ICM Messenger and Registry into a given L1.",
                    "flags": [
                        {
                            "flag": "--blockchain",
                            "description": "string                        deploy ICM into the given CLI blockchain"
                        },
                        {
                            "flag": "--blockchain-id",
                            "description": "string                     deploy ICM into the given blockchain ID/Alias"
                        },
                        {
                            "flag": "--c-chain",
                            "description": "deploy ICM into C-Chain"
                        },
                        {
                            "flag": "--cchain-key",
                            "description": "string                        key to be used to pay fees to deploy ICM to C-Chain"
                        },
                        {
                            "flag": "--cluster",
                            "description": "string                           operate on the given cluster"
                        },
                        {
                            "flag": "--deploy-messenger",
                            "description": "deploy ICM Messenger (default true)"
                        },
                        {
                            "flag": "--deploy-registry",
                            "description": "deploy ICM Registry (default true)"
                        },
                        {
                            "flag": "--devnet",
                            "description": "operate on a devnet network"
                        },
                        {
                            "flag": "--endpoint",
                            "description": "string                          use the given endpoint for network operations"
                        },
                        {
                            "flag": "--force-registry-deploy",
                            "description": "deploy ICM Registry even if Messenger has already been deployed"
                        },
                        {
                            "flag": "-f, --fuji",
                            "description": "testnet                             operate on fuji (alias to testnet"
                        },
                        {
                            "flag": "--genesis-key",
                            "description": "use genesis allocated key to fund ICM deploy"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for deploy"
                        },
                        {
                            "flag": "--include-cchain",
                            "description": "deploy ICM also to C-Chain"
                        },
                        {
                            "flag": "--key",
                            "description": "string                               CLI stored key to use to fund ICM deploy"
                        },
                        {
                            "flag": "-l, --local",
                            "description": "operate on a local network"
                        },
                        {
                            "flag": "--messenger-contract-address-path",
                            "description": "string   path to a messenger contract address file"
                        },
                        {
                            "flag": "--messenger-deployer-address-path",
                            "description": "string   path to a messenger deployer address file"
                        },
                        {
                            "flag": "--messenger-deployer-tx-path",
                            "description": "string        path to a messenger deployer tx file"
                        },
                        {
                            "flag": "--private-key",
                            "description": "string                       private key to use to fund ICM deploy"
                        },
                        {
                            "flag": "--registry-bytecode-path",
                            "description": "string            path to a registry bytecode file"
                        },
                        {
                            "flag": "--rpc-url",
                            "description": "string                           use the given RPC URL to connect to the subnet"
                        },
                        {
                            "flag": "-t, --testnet",
                            "description": "fuji                             operate on testnet (alias to fuji)"
                        },
                        {
                            "flag": "--version",
                            "description": "string                           version to deploy (default \"latest\")"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "sendMsg": {
                    "description": "Sends and wait reception for a ICM msg between two blockchains.",
                    "flags": [
                        {
                            "flag": "--cluster",
                            "description": "string               operate on the given cluster"
                        },
                        {
                            "flag": "--dest-rpc",
                            "description": "string              use the given destination blockchain rpc endpoint"
                        },
                        {
                            "flag": "--destination-address",
                            "description": "string   deliver the message to the given contract destination address"
                        },
                        {
                            "flag": "--devnet",
                            "description": "operate on a devnet network"
                        },
                        {
                            "flag": "--endpoint",
                            "description": "string              use the given endpoint for network operations"
                        },
                        {
                            "flag": "-f, --fuji",
                            "description": "testnet                 operate on fuji (alias to testnet"
                        },
                        {
                            "flag": "--genesis-key",
                            "description": "use genesis allocated key as message originator and to pay source blockchain fees"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for sendMsg"
                        },
                        {
                            "flag": "--hex-encoded",
                            "description": "given message is hex encoded"
                        },
                        {
                            "flag": "--key",
                            "description": "string                   CLI stored key to use as message originator and to pay source blockchain fees"
                        },
                        {
                            "flag": "-l, --local",
                            "description": "operate on a local network"
                        },
                        {
                            "flag": "--private-key",
                            "description": "string           private key to use as message originator and to pay source blockchain fees"
                        },
                        {
                            "flag": "--source-rpc",
                            "description": "string            use the given source blockchain rpc endpoint"
                        },
                        {
                            "flag": "-t, --testnet",
                            "description": "fuji                 operate on testnet (alias to fuji)"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                }
            }
        },
        "transaction": {
            "description": "The transaction command suite provides all of the utilities required to sign multisig transactions.",
            "flags": [
                {
                    "flag": "-h, --help",
                    "description": "help for transaction"
                },
                {
                    "flag": "--config",
                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                },
                {
                    "flag": "--log-level",
                    "description": "string    log level for the application (default \"ERROR\")"
                },
                {
                    "flag": "--skip-update-check",
                    "description": "skip check for new versions"
                }
            ],
            "subcommands": {
                "commit": {
                    "description": "The transaction commit command commits a transaction by submitting it to the P-Chain.",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for commit"
                        },
                        {
                            "flag": "--input-tx-filepath",
                            "description": "string   Path to the transaction signed by all signatories"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "sign": {
                    "description": "The transaction sign command signs a multisig transaction.",
                    "flags": [
                        {
                            "flag": "-h, --help",
                            "description": "help for sign"
                        },
                        {
                            "flag": "--input-tx-filepath",
                            "description": "string   Path to the transaction file for signing"
                        },
                        {
                            "flag": "-k, --key",
                            "description": "string                 select the key to use [fuji only]"
                        },
                        {
                            "flag": "-g, --ledger",
                            "description": "use ledger instead of key (always true on mainnet, defaults to false on fuji)"
                        },
                        {
                            "flag": "--ledger-addrs",
                            "description": "strings       use the given ledger addresses"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                }
            }
        },
        "update": {
            "description": "Check if an update is available, and prompt the user to install it",
            "flags": [
                {
                    "flag": "-c, --confirm",
                    "description": "Assume yes for installation"
                },
                {
                    "flag": "-h, --help",
                    "description": "help for update"
                },
                {
                    "flag": "-v, --version",
                    "description": "version for update"
                },
                {
                    "flag": "--config",
                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                },
                {
                    "flag": "--log-level",
                    "description": "string    log level for the application (default \"ERROR\")"
                },
                {
                    "flag": "--skip-update-check",
                    "description": "skip check for new versions"
                }
            ],
            "subcommands": {}
        },
        "validator": {
            "description": "The validator command suite provides a collection of tools for managing validator\nbalance on P-Chain.\n\nValidator's balance is used to pay for continuous fee to the P-Chain. When this Balance reaches 0, \nthe validator will be considered inactive and will no longer participate in validating the L1",
            "flags": [
                {
                    "flag": "-h, --help",
                    "description": "help for validator"
                },
                {
                    "flag": "--config",
                    "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                },
                {
                    "flag": "--log-level",
                    "description": "string    log level for the application (default \"ERROR\")"
                },
                {
                    "flag": "--skip-update-check",
                    "description": "skip check for new versions"
                }
            ],
            "subcommands": {
                "getBalance": {
                    "description": "This command gets the remaining validator P-Chain balance that is available to pay\nP-Chain continuous fee",
                    "flags": [
                        {
                            "flag": "--cluster",
                            "description": "string         operate on the given cluster"
                        },
                        {
                            "flag": "--devnet",
                            "description": "operate on a devnet network"
                        },
                        {
                            "flag": "--endpoint",
                            "description": "string        use the given endpoint for network operations"
                        },
                        {
                            "flag": "-f, --fuji",
                            "description": "testnet           operate on fuji (alias to testnet"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for getBalance"
                        },
                        {
                            "flag": "--l1",
                            "description": "string              name of L1"
                        },
                        {
                            "flag": "-l, --local",
                            "description": "operate on a local network"
                        },
                        {
                            "flag": "-m, --mainnet",
                            "description": "operate on mainnet"
                        },
                        {
                            "flag": "--node-id",
                            "description": "string         node ID of the validator"
                        },
                        {
                            "flag": "-t, --testnet",
                            "description": "fuji           operate on testnet (alias to fuji)"
                        },
                        {
                            "flag": "--validation-id",
                            "description": "string   validation ID of the validator"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "increaseBalance": {
                    "description": "This command increases the validator P-Chain balance",
                    "flags": [
                        {
                            "flag": "--balance",
                            "description": "float          amount of AVAX to increase validator's balance by"
                        },
                        {
                            "flag": "--cluster",
                            "description": "string         operate on the given cluster"
                        },
                        {
                            "flag": "--devnet",
                            "description": "operate on a devnet network"
                        },
                        {
                            "flag": "--endpoint",
                            "description": "string        use the given endpoint for network operations"
                        },
                        {
                            "flag": "-f, --fuji",
                            "description": "testnet           operate on fuji (alias to testnet"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for increaseBalance"
                        },
                        {
                            "flag": "-k, --key",
                            "description": "string             select the key to use [fuji/devnet deploy only]"
                        },
                        {
                            "flag": "--l1",
                            "description": "string              name of L1 (to increase balance of bootstrap validators only)"
                        },
                        {
                            "flag": "-l, --local",
                            "description": "operate on a local network"
                        },
                        {
                            "flag": "-m, --mainnet",
                            "description": "operate on mainnet"
                        },
                        {
                            "flag": "--node-id",
                            "description": "string         node ID of the validator"
                        },
                        {
                            "flag": "-t, --testnet",
                            "description": "fuji           operate on testnet (alias to fuji)"
                        },
                        {
                            "flag": "--validation-id",
                            "description": "string   validationIDStr of the validator"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                },
                "list": {
                    "description": "This command gets a list of the validators of the L1",
                    "flags": [
                        {
                            "flag": "--cluster",
                            "description": "string    operate on the given cluster"
                        },
                        {
                            "flag": "--devnet",
                            "description": "operate on a devnet network"
                        },
                        {
                            "flag": "--endpoint",
                            "description": "string   use the given endpoint for network operations"
                        },
                        {
                            "flag": "-f, --fuji",
                            "description": "testnet      operate on fuji (alias to testnet"
                        },
                        {
                            "flag": "-h, --help",
                            "description": "help for list"
                        },
                        {
                            "flag": "-l, --local",
                            "description": "operate on a local network"
                        },
                        {
                            "flag": "-m, --mainnet",
                            "description": "operate on mainnet"
                        },
                        {
                            "flag": "-t, --testnet",
                            "description": "fuji      operate on testnet (alias to fuji)"
                        },
                        {
                            "flag": "--config",
                            "description": "string       config file (default is $HOME/.avalanche-cli/config.json)"
                        },
                        {
                            "flag": "--log-level",
                            "description": "string    log level for the application (default \"ERROR\")"
                        },
                        {
                            "flag": "--skip-update-check",
                            "description": "skip check for new versions"
                        }
                    ],
                    "subcommands": {}
                }
            }
        }
    }
}