// Copyright (C) 2025, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.
package main

import (
	"fmt"
	"os"

	"github.com/ava-labs/avalanche-cli/sdk/keychain"
	"github.com/ava-labs/avalanche-cli/sdk/network"
	"github.com/ava-labs/avalanche-cli/sdk/pchain"
	"github.com/ava-labs/avalanche-cli/sdk/wallet"
)

func errorMsg(s string) {
	fmt.Println("Error:", s)
	os.Exit(1)
}

func warningMsg(s string) {
	fmt.Println("Warning:", s)
}

// Function to create a subnet
func createSubnet(
	client wallet.Wallet,
	pChainAddress string,
) (string, error) {
	subnetOwners := []string{pChainAddress}
	subnetThreshold := 1

	// Prepare subnet creation transaction
	fmt.Println("Preparing subnet creation transaction...")
	createSubnetTx, err := pchain.PrepareCreateSubnetTx(
		client,
		subnetOwners,
		subnetThreshold,
	)
	if err != nil {
		return "", err
	}

	// Sign transaction
	fmt.Println("Signing transaction...")
	if err := pchain.SignTransaction(
		client,
		createSubnetTx,
	); err != nil {
		return "", err
	}

	// Send transaction
	fmt.Println("Sending transaction...")
	txHash, err := pchain.SendTransaction(
		client,
		createSubnetTx,
		true, // await for tx acceptance
	)
	if err != nil {
		return "", err
	}

	fmt.Println("\n‚úÖ Subnet created successfully!")
	fmt.Println("Transaction ID:", txHash)
	fmt.Println("Subnet ID:", txHash) // The tx hash is the subnet ID

	if net, _ := createSubnetTx.GetNetwork(); net.Kind == network.Fuji {
		fmt.Println("\nüìù View your transaction:")
		fmt.Printf("https://subnets-test.avax.network/p-chain/tx/%s\n", txHash)
	}

	// Return the subnet ID for potential chain creation
	return txHash, nil
}

// Function to create a chain on an existing subnet
func createChain(
	client wallet.Wallet,
	subnetID string,
	chainName string,
	vmID string,
	subnetAuthKeys []string,
) (string, error) {
	fmt.Println("\nüîó Creating chain on subnet:", subnetID)
	fmt.Println("   Chain name:", chainName)

	genesis := `
{
    "airdropAmount": null,
    "airdropHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
    "alloc": {
      [account.evmAccount.address.slice(2).toLowerCase()]: {
        "balance": "0xd3c21bcecceda1000000"
      },
      "facade0000000000000000000000000000000000": {
        "balance": "0x0",
        "code": "0x6080604052366100135761001161001d565b005b61001b61001d565b005b610025610298565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361028e5760605f5f357fffffffff00000000000000000000000000000000000000000000000000000000169050633659cfe660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036100db576100d46102eb565b9150610286565b634f1ef28660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036101365761012f610346565b9150610285565b638f28397060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036101915761018a610390565b9150610284565b63f851a44060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036101ec576101e56103db565b9150610283565b635c60da1b60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19160361024757610240610416565b9150610282565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027990610995565b60405180910390fd5b5b5b5b5b815160208301f35b610296610451565b565b5f6102c47fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035f1b61046b565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606102f5610474565b5f5f366004908092610309939291906109c4565b8101906103169190610a60565b90506103318160405180602001604052805f8152505f610481565b60405180602001604052805f81525091505090565b60605f5f5f36600490809261035d939291906109c4565b81019061036a9190610bc7565b9150915061037a82826001610481565b60405180602001604052805f8152509250505090565b606061039a610474565b5f5f3660049080926103ae939291906109c4565b8101906103bb9190610a60565b90506103c6816104ac565b60405180602001604052805f81525091505090565b60606103e5610474565b5f6103ee610298565b9050806040516020016104019190610c41565b60405160208183030381529060405291505090565b6060610420610474565b5f6104296104f8565b90508060405160200161043c9190610c41565b60405160208183030381529060405291505090565b610459610506565b6104696104646104f8565b610508565b565b5f819050919050565b5f341461047f575f5ffd5b565b61048a83610527565b5f825111806104965750805b156104a7576104a58383610576565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6104d5610298565b826040516104e4929190610c5a565b60405180910390a16104f5816105a3565b50565b5f61050161067f565b905090565b565b365f5f375f5f365f845af43d5f5f3e805f8114610523573d5ff35b3d5ffd5b610530816106d2565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b606061059b8383604051806060016040528060278152602001610ed060279139610788565b905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060890610cf1565b60405180910390fd5b8061063d7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035f1b61046b565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f6106ab7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b61046b565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6106db8161080a565b61071a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071190610d7f565b60405180910390fd5b806107467f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b61046b565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60605f5f8573ffffffffffffffffffffffffffffffffffffffff16856040516107b19190610def565b5f60405180830381855af49150503d805f81146107e9576040519150601f19603f3d011682016040523d82523d5f602084013e6107ee565b606091505b50915091506107ff8683838761082c565b925050509392505050565b5f5f8273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561088d575f835103610885576108458561080a565b610884576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087b90610e4f565b60405180910390fd5b5b829050610898565b61089783836108a0565b5b949350505050565b5f825111156108b25781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e69190610eaf565b60405180910390fd5b5f82825260208201905092915050565b7f5472616e73706172656e745570677261646561626c6550726f78793a2061646d5f8201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f7879207461726760208201527f6574000000000000000000000000000000000000000000000000000000000000604082015250565b5f61097f6042836108ef565b915061098a826108ff565b606082019050919050565b5f6020820190508181035f8301526109ac81610973565b9050919050565b5f604051905090565b5f5ffd5b5f5ffd5b5f5f858511156109d7576109d66109bc565b5b838611156109e8576109e76109c0565b5b6001850283019150848603905094509492505050565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610a2f82610a06565b9050919050565b610a3f81610a25565b8114610a49575f5ffd5b50565b5f81359050610a5a81610a36565b92915050565b5f60208284031215610a7557610a746109fe565b5b5f610a8284828501610a4c565b91505092915050565b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610ad982610a93565b810181811067ffffffffffffffff82111715610af857610af7610aa3565b5b80604052505050565b5f610b0a6109b3565b9050610b168282610ad0565b919050565b5f67ffffffffffffffff821115610b3557610b34610aa3565b5b610b3e82610a93565b9050602081019050919050565b828183375f83830152505050565b5f610b6b610b6684610b1b565b610b01565b905082815260208101848484011115610b8757610b86610a8f565b5b610b92848285610b4b565b509392505050565b5f82601f830112610bae57610bad610a8b565b5b8135610bbe848260208601610b59565b91505092915050565b5f5f60408385031215610bdd57610bdc6109fe565b5b5f610bea85828601610a4c565b925050602083013567ffffffffffffffff811115610c0b57610c0a610a02565b5b610c1785828601610b9a565b9150509250929050565b5f610c2b82610a06565b9050919050565b610c3b81610c21565b82525050565b5f602082019050610c545f830184610c32565b92915050565b5f604082019050610c6d5f830185610c32565b610c7a6020830184610c32565b9392505050565b7f455243313936373a206e65772061646d696e20697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f610cdb6026836108ef565b9150610ce682610c81565b604082019050919050565b5f6020820190508181035f830152610d0881610ccf565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e5f8201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b5f610d69602d836108ef565b9150610d7482610d0f565b604082019050919050565b5f6020820190508181035f830152610d9681610d5d565b9050919050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f610dc982610d9d565b610dd38185610da7565b9350610de3818560208601610db1565b80840191505092915050565b5f610dfa8284610dbf565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000005f82015250565b5f610e39601d836108ef565b9150610e4482610e05565b602082019050919050565b5f6020820190508181035f830152610e6681610e2d565b9050919050565b5f81519050919050565b5f610e8182610e6d565b610e8b81856108ef565b9350610e9b818560208601610db1565b610ea481610a93565b840191505092915050565b5f6020820190508181035f830152610ec78184610e77565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a4fd4164e13f6a8b70a706ea18e106378d1bb2dd5dccae08818296844d08dab264736f6c634300081c0033",
        "storage": {
          "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x0000000000000000000000001212121212121212121212121212121212121212",
          "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x000000000000000000000000dad0000000000000000000000000000000000000"
        },
        "nonce": "0x1"
      },
      "dad0000000000000000000000000000000000000": {
        "balance": "0x0",
        "code": "0x60806040526004361061007a575f3560e01c80639623609d1161004d5780639623609d1461012257806399a88ec41461013e578063f2fde38b14610166578063f3b7dead1461018e5761007a565b8063204e1c7a1461007e578063715018a6146100ba5780637eff275e146100d05780638da5cb5b146100f8575b5f5ffd5b348015610089575f5ffd5b506100a4600480360381019061009f91906106bf565b6101ca565b6040516100b191906106f9565b60405180910390f35b3480156100c5575f5ffd5b506100ce610258565b005b3480156100db575f5ffd5b506100f660048036038101906100f1919061073c565b61026b565b005b348015610103575f5ffd5b5061010c6102dd565b60405161011991906106f9565b60405180910390f35b61013c600480360381019061013791906108b6565b610304565b005b348015610149575f5ffd5b50610164600480360381019061015f919061073c565b61037b565b005b348015610171575f5ffd5b5061018c60048036038101906101879190610922565b6103ed565b005b348015610199575f5ffd5b506101b460048036038101906101af91906106bf565b61046f565b6040516101c191906106f9565b60405180910390f35b5f5f5f8373ffffffffffffffffffffffffffffffffffffffff166040516101f0906109a1565b5f60405180830381855afa9150503d805f8114610228576040519150601f19603f3d011682016040523d82523d5f602084013e61022d565b606091505b50915091508161023b575f5ffd5b8080602001905181019061024f91906109f0565b92505050919050565b6102606104fd565b6102695f61057b565b565b6102736104fd565b8173ffffffffffffffffffffffffffffffffffffffff16638f283970826040518263ffffffff1660e01b81526004016102ac91906106f9565b5f604051808303815f87803b1580156102c3575f5ffd5b505af11580156102d5573d5f5f3e3d5ffd5b505050505050565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61030c6104fd565b8273ffffffffffffffffffffffffffffffffffffffff16634f1ef2863484846040518463ffffffff1660e01b8152600401610348929190610a7b565b5f604051808303818588803b15801561035f575f5ffd5b505af1158015610371573d5f5f3e3d5ffd5b5050505050505050565b6103836104fd565b8173ffffffffffffffffffffffffffffffffffffffff16633659cfe6826040518263ffffffff1660e01b81526004016103bc91906106f9565b5f604051808303815f87803b1580156103d3575f5ffd5b505af11580156103e5573d5f5f3e3d5ffd5b505050505050565b6103f56104fd565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045a90610b29565b60405180910390fd5b61046c8161057b565b50565b5f5f5f8373ffffffffffffffffffffffffffffffffffffffff1660405161049590610b91565b5f60405180830381855afa9150503d805f81146104cd576040519150601f19603f3d011682016040523d82523d5f602084013e6104d2565b606091505b5091509150816104e0575f5ffd5b808060200190518101906104f491906109f0565b92505050919050565b61050561063c565b73ffffffffffffffffffffffffffffffffffffffff166105236102dd565b73ffffffffffffffffffffffffffffffffffffffff1614610579576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057090610bef565b60405180910390fd5b565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f33905090565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61067d82610654565b9050919050565b5f61068e82610673565b9050919050565b61069e81610684565b81146106a8575f5ffd5b50565b5f813590506106b981610695565b92915050565b5f602082840312156106d4576106d361064c565b5b5f6106e1848285016106ab565b91505092915050565b6106f381610673565b82525050565b5f60208201905061070c5f8301846106ea565b92915050565b61071b81610673565b8114610725575f5ffd5b50565b5f8135905061073681610712565b92915050565b5f5f604083850312156107525761075161064c565b5b5f61075f858286016106ab565b925050602061077085828601610728565b9150509250929050565b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6107c882610782565b810181811067ffffffffffffffff821117156107e7576107e6610792565b5b80604052505050565b5f6107f9610643565b905061080582826107bf565b919050565b5f67ffffffffffffffff82111561082457610823610792565b5b61082d82610782565b9050602081019050919050565b828183375f83830152505050565b5f61085a6108558461080a565b6107f0565b9050828152602081018484840111156108765761087561077e565b5b61088184828561083a565b509392505050565b5f82601f83011261089d5761089c61077a565b5b81356108ad848260208601610848565b91505092915050565b5f5f5f606084860312156108cd576108cc61064c565b5b5f6108da868287016106ab565b93505060206108eb86828701610728565b925050604084013567ffffffffffffffff81111561090c5761090b610650565b5b61091886828701610889565b9150509250925092565b5f602082840312156109375761093661064c565b5b5f61094484828501610728565b91505092915050565b5f81905092915050565b7f5c60da1b000000000000000000000000000000000000000000000000000000005f82015250565b5f61098b60048361094d565b915061099682610957565b600482019050919050565b5f6109ab8261097f565b9150819050919050565b5f6109bf82610654565b9050919050565b6109cf816109b5565b81146109d9575f5ffd5b50565b5f815190506109ea816109c6565b92915050565b5f60208284031215610a0557610a0461064c565b5b5f610a12848285016109dc565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f610a4d82610a1b565b610a578185610a25565b9350610a67818560208601610a35565b610a7081610782565b840191505092915050565b5f604082019050610a8e5f8301856106ea565b8181036020830152610aa08184610a43565b90509392505050565b5f82825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f610b13602683610aa9565b9150610b1e82610ab9565b604082019050919050565b5f6020820190508181035f830152610b4081610b07565b9050919050565b7ff851a440000000000000000000000000000000000000000000000000000000005f82015250565b5f610b7b60048361094d565b9150610b8682610b47565b600482019050919050565b5f610b9b82610b6f565b9150819050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f610bd9602083610aa9565b9150610be482610ba5565b602082019050919050565b5f6020820190508181035f830152610c0681610bcd565b905091905056fea2646970667358221220cb8caf4ddfd482fc21ca42d38863c177590557d3738c585d69c029cdb9d4cd2364736f6c634300081c0033",
        "nonce": "0x1",
        "storage": {
          "0x0000000000000000000000000000000000000000000000000000000000000000": "0x000000000000000000000000" + account.evmAccount.address.slice(2)
        }
      },
      "914d7fec6aac8cd542e72bca78b30650d45643d7": {
        "balance": "0x0",
        "code": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf3",
        "nonce": "0x1"
      }
    },
    "baseFeePerGas": null,
    "blobGasUsed": null,
    "coinbase": "0x0000000000000000000000000000000000000000",
    "config": {
      "berlinBlock": 0,
      "byzantiumBlock": 0,
      "chainId": 25451,
      "constantinopleBlock": 0,
      "eip150Block": 0,
      "eip155Block": 0,
      "eip158Block": 0,
      "feeConfig": {
        "baseFeeChangeDenominator": 48,
        "blockGasCostStep": 200000,
        "maxBlockGasCost": 1000000,
        "minBaseFee": 25000000000,
        "minBlockGasCost": 0,
        "targetGas": 15000000,
        "gasLimit": 15000000,
        "targetBlockRate": 2
      },
      "homesteadBlock": 0,
      "istanbulBlock": 0,
      "londonBlock": 0,
      "muirGlacierBlock": 0,
      "petersburgBlock": 0,
      "warpConfig": {
        "blockTimestamp": 1751038411,
        "quorumNumerator": 67,
        "requirePrimaryNetworkSigners": true
      }
    },
    "difficulty": "0x0",
    "excessBlobGas": null,
    "extraData": "0x",
    "gasLimit": "0xe4e1c0",
    "gasUsed": "0x0",
    "mixHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
    "nonce": "0x0",
    "number": "0x0",
    "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
    "timestamp": "0x685eb9cb"
}`

	// Prepare chain creation transaction
	fmt.Println("Preparing chain creation transaction...")
	createChainTx, err := pchain.PrepareCreateChainTx(
		client,
		subnetID,
		vmID,
		chainName,
		[]byte(genesis),
		subnetAuthKeys,
	)
	if err != nil {
		return "", err
	}

	// Sign transaction
	fmt.Println("Signing transaction...")
	if err := pchain.SignTransaction(
		client,
		createChainTx,
	); err != nil {
		return "", err
	}

	// Send transaction
	fmt.Println("Sending transaction...")
	txHash, err := pchain.SendTransaction(
		client,
		createChainTx,
		true, // await for tx acceptance
	)
	if err != nil {
		return "", err
	}

	fmt.Println("\n‚úÖ Chain created successfully!")
	fmt.Println("Transaction ID:", txHash)
	fmt.Println("Chain ID:", txHash) // The tx hash is the subnet ID

	if net, _ := createChainTx.GetNetwork(); net.Kind == network.Fuji {
		fmt.Println("\nüìù View your transaction:")
		fmt.Printf("https://subnets-test.avax.network/p-chain/tx/%s\n", txHash)
	}

	// Return the chain ID for potential further operations
	return txHash, nil
}

func main() {
	// Get environment variables
	networkEndpoint := os.Getenv("NETWORK_ENDPOINT")
	if networkEndpoint == "" {
		errorMsg("NETWORK_ENDPOINT not found in environment variables")
	}
	privateKey := os.Getenv("PRIVATE_KEY")
	if privateKey == "" {
		errorMsg("PRIVATE_KEY not found in environment variables")
	}
	vmID := os.Getenv("VM_ID")
	if vmID == "" {
		warningMsg("VM_ID not found in environment variables, using default Subnet-EVM VM ID")
		vmID = "mDtV8ES8wRL1j2m6Kvc1qRFAvnpq4kufhueAY1bwbzVhk336o"
	}

	// Create account from private key
	account, err := keychain.PrivateKeyToAvalancheAccount(privateKey)
	if err != nil {
		errorMsg(err.Error())
	}

	// Retrieve network from endpoint
	network, err := network.EndpointToNetwork(networkEndpoint)
	if err != nil {
		errorMsg(err.Error())
	}

	// Get C-Chain and P-Chain addresses
	cChainAddresses, err := account.C()
	if err != nil {
		errorMsg(err.Error())
	}
	pChainAddresses, err := account.P(network)
	if err != nil {
		errorMsg(err.Error())
	}
	cChainAddress := cChainAddresses[0]
	pChainAddress := pChainAddresses[0]
	fmt.Println("C-Chain address:", cChainAddress)
	fmt.Println("P-Chain address:", pChainAddress)

	// Create wallet client
	client, err := wallet.New(
		network,
		account,
		wallet.Config{},
	)
	if err != nil {
		errorMsg(err.Error())
	}

	// Step 1: Create subnet
	fmt.Println()
	fmt.Println("Step 1: Creating subnet...")
	subnetID, err := createSubnet(client, pChainAddress)
	if err != nil {
		errorMsg(err.Error())
	}

	// Step 2: Create chain on the subnet
	fmt.Println()
	fmt.Println("Step 2: Creating chain...")
	chainName := "test chain avalanche sdk" // You can customize this name
	chain, err := createChain(client, subnetID, chainName, vmID, []string{pChainAddress})
	if err != nil {
		errorMsg(err.Error())
	}

	fmt.Println("Create chain result:", chain)
}
