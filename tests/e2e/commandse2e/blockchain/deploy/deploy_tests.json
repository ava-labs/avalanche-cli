{
  "globalFlags": {
    "local": true,
    "skip-icm-deploy": true,
    "skip-update-check": true
  },
  "happyPath": [
    {
      "name": "local deploy default",
      "flags": {},
      "expectedContain": [
        "L1 is successfully deployed on Local Network"
      ]
    },
    {
      "name": "local deploy and use provided subnet id",
      "flags": {
        "subnet-id": ""
      },
      "expectedContain": [
        "Deploying into pre-existent subnet ID",
        "CreateChainTx fee",
        "ConvertSubnetToL1Tx fee",
        "L1 is successfully deployed on Local Network"
      ],
      "expectedNotContain": [
        "CreateSubnetTx fee"
      ]
    },
    {
      "name": "local deploy using provided avalanchego path in flag",
      "flags": {
        "avalanchego-path": "tests/e2e/assets/avalanchego"
      },
    "expectedContain": [
      "AvalancheGo path: {avalanchego-path}"
    ]
    },
    {
      "name": "local deploy convert only",
      "flags": {
        "convert-only": true
      },
      "expectedContain": [
        "To finish conversion to sovereign L1, create the corresponding Avalanche node(s) with the provided Node ID and BLS Info",
        "Ensure that the P2P port is exposed and 'public-ip' config value is set",
        "Once the Avalanche Node(s) are created and are tracking the blockchain, call `avalanche contract initValidatorManager testSubnet` to finish conversion to sovereign L1"
      ],
      "expectedNotContain": [
        "CreateChainTx fee",
        "ConvertSubnetToL1Tx fee",
        "L1 is successfully deployed on Local Network"
      ]
    },
    {
      "name": "local deploy using provided avalanchego path in flag",
      "flags": {
        "num-bootstrap-validators": ""
      }
    },
    {
      "name": "local deploy using provided avalanchego path in flag",
      "flags": {
        "balance": ""
      }
    },
    {
      "name": "local deploy using provided avalanchego path in flag",
      "flags": {
        "num-local-nodes": ""
      }
    }
  ],
  "notHappyPath": [
    {
      "name": "invalid_version",
      "flags": {
        "avalanchego-version": "invalid_version"
      },
      "expectedError": "invalid version string"
    },
    {
      "name": "local deploy using invalid avalanchego path",
      "flags": {
        "avalanchego-path": "invalid_avago_path"
      },
      "expectedError": "invalid version string"
    },
    {
      "name": "local deploy and use provided subnet id, but subnet id is invalid",
      "flags": {
        "subnet-id": "invalid_subnet_id"
      },
      "expectedError": "invalid version string"
    },
    {
      "name": "invalid_version",
      "flags": {
        "use-local-machine": false
      },
      "expectedError": "invalid version string"
    },
    {
      "name": "local deploy and generate node id",
      "flags": {
        "generate-node-id": true
      },
      "expectedError": "invalid version string"
    }
  ]
}